{"version":3,"sources":["../src/quiz.js"],"names":["define","Vue","Vuetify","Axios","Moment","Pagination","ChartDynamic","PageHeader","HelpDialog","init","content","use","component","vue","delimiters","el","vuetify","data","strings","groups","userid","courseid","timezone","render_has","profile_render","loading","errors","pages","quiz","questions_attempts_colors","hardest_questions_colors","default_quiz","attempts_categories","attempts_series","attempts_questions","hardest_categories","hardest_series","hardest_questions","help_dialog","help_contents","beforeMount","length","attempts","calculate_questions_attempts","mounted","document","querySelector","style","display","methods","get_help_content","contents","title","section_help_title","description","section_help_description","get_quiz_info_text1","text","quiz_number_questions","details","questions","get_quiz_info_text2","quiz_attempts_done","get_quiz_info_text3","quiz_students_attempts","users","build_questions_attempts_chart","chart","type","backgroundColor","fontFamily","colors","xAxis","categories","yAxis","min","allowDecimals","questions_attempts_yaxis_title","tooltip","useHTML","formatter","question_name","x","attemps","y","total_attemps","total","percentage","Math","round","series_name","series","name","of_conector","review_question","color","plotOptions","column","stacking","cursor","point","events","click","question","id","url","M","cfg","wwwroot","window","open","build_hardest_questions_chart","legend","enabled","position","question_info","serie_name","value","ha","to","hardest_questions_yaxis_title","labels","format","cont","ql","correct","partcorrect","incorr","gaveup","needgrade","hardest","co","pc","ic","ga","ng","forEach","gradedright","mangrright","gradedpartial","mangrpartial","gradedwrong","mangrwrong","mangaveup","needsgrading","finished","manfinished","push","qu","pe","correct_attempt","partcorrect_attempt","incorrect_attempt","blank_attempt","needgraded_attempt","hardest_data","sort","compare_hardest","element","update_interactions","week","action","weekcode","profile","method","params","then","response","status","ok","reset_graphs","error_messages","error_network","catch","api_error_network","finally","a","b","open_chart_help","questions_attempts_help_title","questions_attempts_help_description_p1","questions_attempts_help_description_p2","questions_attempts_help_description_p3","hardest_questions_help_title","hardest_questions_help_description_p1","hardest_questions_help_description_p2","hardest_questions_help_description_p3","update_help_dialog","get_timezone","information","change_timezone"],"mappings":"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","sourcesContent":["define([\"local_fliplearning/vue\",\r\n        \"local_fliplearning/vuetify\",\r\n        \"local_fliplearning/axios\",\r\n        \"local_fliplearning/moment\",\r\n        \"local_fliplearning/pagination\",\r\n        \"local_fliplearning/chartdynamic\",\r\n        \"local_fliplearning/pageheader\",\r\n        \"local_fliplearning/helpdialog\",\r\n    ],\r\n    function(Vue, Vuetify, Axios, Moment, Pagination, ChartDynamic, PageHeader, HelpDialog) {\r\n        \"use strict\";\r\n\r\n        function init(content) {\r\n            // console.logs(content);\r\n            Vue.use(Vuetify);\r\n            Vue.component('pagination', Pagination);\r\n            Vue.component('chart', ChartDynamic);\r\n            Vue.component('pageheader', PageHeader);\r\n            Vue.component('helpdialog', HelpDialog);\r\n            let vue = new Vue({\r\n                delimiters: [\"[[\", \"]]\"],\r\n                el: \"#quiz\",\r\n                vuetify: new Vuetify(),\r\n                data() {\r\n                    return {\r\n                        strings: content.strings,\r\n                        groups: content.groups,\r\n                        userid: content.userid,\r\n                        courseid: content.courseid,\r\n                        timezone: content.timezone,\r\n                        render_has: content.profile_render,\r\n                        loading: false,\r\n                        errors: [],\r\n                        pages: content.pages,\r\n\r\n                        quiz: content.quiz,\r\n                        questions_attempts_colors: content.questions_attempts_colors,\r\n                        hardest_questions_colors: content.hardest_questions_colors,\r\n                        default_quiz: null,\r\n                        attempts_categories: [],\r\n                        attempts_series: [],\r\n                        attempts_questions: [],\r\n                        hardest_categories: [],\r\n                        hardest_series: [],\r\n                        hardest_questions: [],\r\n\r\n                        help_dialog: false,\r\n                        help_contents: [],\r\n                    }\r\n                },\r\n                beforeMount() {\r\n                    if (this.quiz.length) {\r\n                        this.default_quiz = this.quiz[0].attempts;\r\n                        this.calculate_questions_attempts(this.default_quiz);\r\n                    };\r\n                },\r\n                mounted() {\r\n                    document.querySelector(\"#sessions-loader\").style.display = \"none\";\r\n                    document.querySelector(\"#quiz\").style.display = \"block\";\r\n                },\r\n                methods: {\r\n                    get_help_content() {\r\n                        let contents = [];\r\n                        contents.push({\r\n                            title: this.strings.section_help_title,\r\n                            description: this.strings.section_help_description,\r\n                        });\r\n                        return contents;\r\n                    },\r\n\r\n                    get_quiz_info_text1() {\r\n                        let text = '';\r\n                        if (this.default_quiz) {\r\n                            text = `* ${this.strings.quiz_number_questions}: ${this.default_quiz.details.questions}`;\r\n                        }\r\n                        return text;\r\n                    },\r\n\r\n                    get_quiz_info_text2() {\r\n                        let text = '';\r\n                        if (this.default_quiz) {\r\n                            text = `* ${this.strings.quiz_attempts_done}: ${this.default_quiz.details.attempts}`;\r\n                        }\r\n                        return text;\r\n                    },\r\n\r\n                    get_quiz_info_text3() {\r\n                        let text = '';\r\n                        if (this.default_quiz) {\r\n                            text = `* ${this.strings.quiz_students_attempts}: ${this.default_quiz.details.users}`;\r\n                        }\r\n                        return text;\r\n                    },\r\n\r\n                    build_questions_attempts_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'column',\r\n                            backgroundColor: null,\r\n                            style: { fontFamily: 'poppins' },\r\n                        };\r\n                        chart.title = {\r\n                            text: null\r\n                        };\r\n                        chart.colors = this.questions_attempts_colors;\r\n                        chart.xAxis = {\r\n                            categories: this.attempts_categories\r\n                        };\r\n                        chart.yAxis = [{\r\n                            min: 0,\r\n                            allowDecimals: false,\r\n                            title: {\r\n                                text: this.strings.questions_attempts_yaxis_title\r\n                            }\r\n                        }];\r\n                        chart.tooltip = {\r\n                            useHTML: true,\r\n                            formatter: function() {\r\n                                let question_name = this.x;\r\n                                let attemps = this.y;\r\n                                let total_attemps = this.total;\r\n                                let percentage = Math.round(Number(this.percentage));\r\n                                let series_name = this.series.name;\r\n                                let of_conector = vue.strings.of_conector;\r\n                                let review_question = vue.strings.review_question;\r\n                                return '<small>' + question_name + '</small></br>' +\r\n                                    '<b style=\"color: ' + this.color + ';\">• </b>' +\r\n                                    series_name + ': ' + attemps + ' ' + of_conector + ' ' + total_attemps +\r\n                                    ' (' + percentage + '%)' + '<br/>' +\r\n                                    '<small>' + review_question + '</small>';\r\n                            }\r\n                        };\r\n                        chart.plotOptions = {\r\n                            column: {\r\n                                stacking: 'normal'\r\n                            },\r\n                            series: {\r\n                                cursor: 'pointer',\r\n                                point: {\r\n                                    events: {\r\n                                        click: function() {\r\n                                            let question = vue.attempts_questions[this.x];\r\n                                            let id = question.id;\r\n                                            let url = M.cfg.wwwroot + '/question/preview.php?id=' + id + '&courseid=' + vue.courseid;\r\n                                            window.open(url, '_blank', 'top=50,left=50,width=900,height=600');\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.series = this.attempts_series;\r\n                        return chart;\r\n                    },\r\n\r\n                    build_hardest_questions_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'column',\r\n                            backgroundColor: null,\r\n                            style: { fontFamily: 'poppins' },\r\n                        };\r\n                        chart.title = {\r\n                            text: null,\r\n                        };\r\n                        chart.colors = this.hardest_questions_colors;\r\n                        chart.xAxis = {\r\n                            categories: this.hardest_categories,\r\n                        };\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.tooltip = {\r\n                            useHTML: true,\r\n                            formatter: function() {\r\n                                let position = this.point.x;\r\n                                let question_info = vue.hardest_questions[position];\r\n                                let question_name = this.x;\r\n                                let serie_name = this.series.name;\r\n                                let value = this.y;\r\n                                let of_conector = vue.strings.of_conector;\r\n                                let review_question = vue.strings.review_question;\r\n                                return '<small>' + question_name + '</small></br>' +\r\n                                    '<b style=\"color: ' + this.color + ';\">• </b>' +\r\n                                    serie_name + ': ' + question_info.ha + ' ' + of_conector + ' ' +\r\n                                    question_info.to + ' (' + value + '%)' + '<br/>' +\r\n                                    '<small>' + review_question + '</small>';\r\n                            }\r\n                        };\r\n                        chart.yAxis = [{\r\n                            min: 0,\r\n                            allowDecimals: false,\r\n                            title: {\r\n                                text: this.strings.hardest_questions_yaxis_title\r\n                            },\r\n                            labels: {\r\n                                format: '{value} %',\r\n                            },\r\n                        }];\r\n                        chart.plotOptions = {\r\n                            series: {\r\n                                cursor: 'pointer',\r\n                                point: {\r\n                                    events: {\r\n                                        click: function() {\r\n                                            let question = vue.hardest_questions[this.x];\r\n                                            let id = question.id;\r\n                                            let url = M.cfg.wwwroot + '/question/preview.php?id=' + id + '&courseid=' + vue.courseid;\r\n                                            window.open(url, '_blank', 'top=50,left=50,width=900,height=600');\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.series = this.hardest_series;\r\n                        return chart;\r\n                    },\r\n\r\n                    calculate_questions_attempts(quiz) {\r\n                        let questions = quiz.questions;\r\n                        let attempts_categories = [];\r\n                        let cont = 1,\r\n                            ql = \"\";\r\n\r\n                        let correct = [],\r\n                            partcorrect = [],\r\n                            incorr = [],\r\n                            gaveup = [],\r\n                            needgrade = [],\r\n                            hardest = [],\r\n                            attempts_questions = [];\r\n                        let co, pc, ic, ga, ng, to, ha = 0;\r\n\r\n                        questions.forEach(question => {\r\n                            co,\r\n                            pc,\r\n                            ic,\r\n                            ga,\r\n                            ng,\r\n                            to = 0;\r\n                            co = (question.gradedright || 0) + (question.mangrright || 0);\r\n                            pc = (question.gradedpartial || 0) + (question.mangrpartial || 0);\r\n                            ic = (question.gradedwrong || 0) + (question.mangrwrong || 0);\r\n                            ga = (question.gaveup || 0) + (question.mangaveup || 0);\r\n                            ng = (question.needsgrading || 0) + (question.mangaveup || 0) +\r\n                            (question.finished || 0) + (question.manfinished || 0);\r\n\r\n                            correct.push(co);\r\n                            partcorrect.push(pc);\r\n                            incorr.push(ic);\r\n                            gaveup.push(ga);\r\n                            needgrade.push(ng);\r\n\r\n                            ql = 'P' + cont;\r\n                            ha = pc + ic + ga;\r\n                            to = co + pc + ic + ga + ng;\r\n                            hardest.push({ id: question.id, qu: ql, ha: ha, to: to, pe: Math.round((ha * 100) / to), });\r\n                            attempts_categories.push(ql);\r\n                            attempts_questions.push(question);\r\n                            cont++;\r\n                        });\r\n\r\n                        let attempts_series = [];\r\n                        attempts_series.push({\r\n                            name: this.strings.correct_attempt,\r\n                            data: correct\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.partcorrect_attempt,\r\n                            data: partcorrect\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.incorrect_attempt,\r\n                            data: incorr\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.blank_attempt,\r\n                            data: gaveup\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.needgraded_attempt,\r\n                            data: needgrade\r\n                        });\r\n\r\n                        let hardest_categories = [],\r\n                            hardest_data = [],\r\n                            hardest_questions = [];\r\n                        hardest.sort(this.compare_hardest);\r\n                        hardest.forEach(element => {\r\n                            if (element.pe) {\r\n                                hardest_categories.push(element.qu);\r\n                                hardest_data.push(element.pe);\r\n                                hardest_questions.push(element);\r\n                            }\r\n                        });\r\n\r\n                        let hardest_series = [{\r\n                            name: this.strings.hardest_questions_yaxis_title,\r\n                            data: hardest_data\r\n                        }];\r\n\r\n                        this.attempts_categories = attempts_categories;\r\n                        this.attempts_series = attempts_series;\r\n                        this.attempts_questions = attempts_questions;\r\n                        this.hardest_categories = hardest_categories;\r\n                        this.hardest_series = hardest_series;\r\n                        this.hardest_questions = hardest_questions;\r\n                    },\r\n\r\n                    update_interactions(week) {\r\n                        this.loading = true;\r\n                        this.errors = [];\r\n                        let data = {\r\n                            action: \"quiz\",\r\n                            userid: this.userid,\r\n                            courseid: this.courseid,\r\n                            weekcode: week.weekcode,\r\n                            profile: this.render_has,\r\n                        }\r\n                        Axios({\r\n                            method: 'get',\r\n                            url: M.cfg.wwwroot + \"/local/fliplearning/ajax.php\",\r\n                            params: data,\r\n                        }).then((response) => {\r\n                            if (response.status == 200 && response.data.ok) {\r\n                                this.quiz = response.data.data.quiz;\r\n                                if (this.quiz.length) {\r\n                                    this.default_quiz = this.quiz[0].attempts;\r\n                                    this.calculate_questions_attempts(this.default_quiz);\r\n                                } else {\r\n                                    this.reset_graphs();\r\n                                };\r\n                            } else {\r\n                                this.error_messages.push(this.strings.error_network);\r\n                            }\r\n                        }).catch((e) => {\r\n                            this.errors.push(this.strings.api_error_network);\r\n                        }).finally(() => {\r\n                            this.loading = false;\r\n                        });\r\n                        return this.data;\r\n                    },\r\n\r\n                    reset_graphs() {\r\n                        this.default_quiz = null;\r\n                        this.attempts_categories = [];\r\n                        this.attempts_series = [];\r\n                        this.attempts_questions = [];\r\n                        this.hardest_categories = [];\r\n                        this.hardest_series = [];\r\n                        this.hardest_questions = [];\r\n                    },\r\n\r\n                    compare_hardest(a, b) {\r\n                        if (a.pe > b.pe) {\r\n                            return -1;\r\n                        }\r\n                        if (a.pe < b.pe) {\r\n                            return 1;\r\n                        }\r\n                        return 0;\r\n                    },\r\n\r\n                    open_chart_help(chart) {\r\n                        let contents = [];\r\n                        if (chart == \"questions_attempts\") {\r\n                            contents.push({\r\n                                title: this.strings.questions_attempts_help_title,\r\n                                description: this.strings.questions_attempts_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.questions_attempts_help_description_p2,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.questions_attempts_help_description_p3,\r\n                            });\r\n                        } else if (chart == \"hardest_questions\") {\r\n                            contents.push({\r\n                                title: this.strings.hardest_questions_help_title,\r\n                                description: this.strings.hardest_questions_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.hardest_questions_help_description_p2,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.hardest_questions_help_description_p3,\r\n                            });\r\n                        }\r\n                        this.help_contents = contents;\r\n                        if (this.help_contents.length) {\r\n                            this.help_dialog = true;\r\n                        }\r\n                    },\r\n\r\n                    update_help_dialog(value) {\r\n                        this.help_dialog = value;\r\n                    },\r\n\r\n                    get_timezone() {\r\n                        let information = `${this.strings.change_timezone} ${this.timezone}`\r\n                        return information;\r\n                    },\r\n                }\r\n            })\r\n        }\r\n\r\n        return {\r\n            init: init\r\n        };\r\n    });"],"file":"quiz.min.js"}