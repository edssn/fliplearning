{"version":3,"sources":["../src/quiz.js"],"names":["define","Vue","Vuetify","Axios","Moment","Pagination","Chart","Pageheader","init","content","console","log","use","component","delimiters","el","vuetify","data","strings","groups","userid","courseid","timezone","render_has","profile_render","loading","errors","pages","quiz","default_quiz","attempts_categories","attempts_series","hardest_categories","hardest_series","beforeMount","length","attempts","calculate_questions_attempts","mounted","document","querySelector","style","display","computed","methods","get_help_content","get_quiz_info_text1","questions_number","details","questions","questions_label","questions_text","question_text","text","quiz_info_text","get_quiz_info_text2","attempts_number","attempts_label","attempts_text","attempt_text","students_number","users","students_label","students_text","student_text","build_chart_questions_attempts","chart","type","backgroundColor","title","subtitle","xAxis","categories","yAxis","min","allowDecimals","plotOptions","column","stacking","series","credits","enabled","lang","noData","no_data","build_chart_hardest_questions","legend","cont","correct","partcorrect","incorr","gaveup","needgrade","hardest","co","pc","ic","ga","ng","ha","forEach","question","gradedright","mangrright","gradedpartial","mangrpartial","gradedwrong","mangrwrong","mangaveup","needsgrading","finished","manfinished","push","qu","in","sort","compare_hardest","hardest_data","element","name","a","b","change_quiz","value","update_interactions","week","action","weekcode","profile","method","url","M","cfg","wwwroot","params","then","response","status","ok","error_messages","error_network","catch","api_error_network","finally"],"mappings":"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","sourcesContent":["define([\"local_fliplearning/vue\",\r\n        \"local_fliplearning/vuetify\",\r\n        \"local_fliplearning/axios\",\r\n        \"local_fliplearning/moment\",\r\n        \"local_fliplearning/pagination\",\r\n        \"local_fliplearning/chartcomponent\",\r\n        \"local_fliplearning/pageheader\",\r\n    ],\r\n    function(Vue, Vuetify, Axios, Moment, Pagination, Chart, Pageheader) {\r\n        \"use strict\";\r\n\r\n        function init(content) {\r\n            console.log(content);\r\n            Vue.use(Vuetify)\r\n            Vue.component('pagination', Pagination);\r\n            Vue.component('chart', Chart);\r\n            Vue.component('pageheader', Pageheader);\r\n            let vue = new Vue({\r\n                delimiters: [\"[[\", \"]]\"],\r\n                el: \"#quiz\",\r\n                vuetify: new Vuetify(),\r\n                data() {\r\n                    return {\r\n                        strings : content.strings,\r\n                        groups : content.groups,\r\n                        userid : content.userid,\r\n                        courseid : content.courseid,\r\n                        timezone : content.timezone,\r\n                        render_has : content.profile_render,\r\n                        loading : false,\r\n                        errors : [],\r\n                        pages : content.pages,\r\n\r\n                        quiz : content.quiz,\r\n                        default_quiz: null,\r\n                        attempts_categories: [],\r\n                        attempts_series: [],\r\n                        hardest_categories: [],\r\n                        hardest_series: [],\r\n                    }\r\n                },\r\n                beforeMount(){\r\n                    if (this.quiz.data.length) {\r\n                        this.default_quiz = this.quiz.data[0].attempts;\r\n                        this.calculate_questions_attempts(this.default_quiz);\r\n                    };\r\n                },\r\n                mounted(){\r\n                    document.querySelector(\"#sessions-loader\").style.display = \"none\";\r\n                    document.querySelector(\"#quiz\").style.display = \"block\";\r\n                },\r\n                computed :{\r\n\r\n                },\r\n                methods : {\r\n                    get_help_content(){\r\n                        let helpcontents = `Texto de Ayuda`;\r\n                        return helpcontents;\r\n                    },\r\n\r\n                    get_quiz_info_text1() {\r\n                        let questions_number = this.default_quiz.details.questions;\r\n                        let questions_label = this.strings.questions_text;\r\n                        if (questions_number == 1) {\r\n                            questions_label = this.strings.question_text;\r\n                        }\r\n                        let text = `* ${this.strings.quiz_info_text} ${questions_number} ${questions_label}`;\r\n                        return text;\r\n                    },\r\n\r\n                    get_quiz_info_text2() {\r\n                        let attempts_number = this.default_quiz.details.attempts;\r\n                        let attempts_label = this.strings.attempts_text;\r\n                        if (attempts_number == 1) {\r\n                            attempts_label = this.strings.attempt_text;\r\n                        }\r\n                        let students_number = this.default_quiz.details.users;\r\n                        let students_label = this.strings.students_text;\r\n                        if (students_number == 1) {\r\n                            students_label = this.strings.student_text;\r\n                        }\r\n                        let text = `* ${attempts_number} ${attempts_label} ${students_number} ${students_label}`;\r\n                        return text;\r\n                    },\r\n\r\n                    build_chart_questions_attempts() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'column',\r\n                            backgroundColor: '#FAFAFA',\r\n                        };\r\n                        chart.title = {\r\n                            text: 'Intentos de Preguntas'\r\n                        };\r\n                        chart.subtitle = {\r\n                            text: 'Subtitulo',\r\n                        };\r\n                        chart.xAxis = {\r\n                            categories: this.attempts_categories\r\n                        };\r\n                        chart.yAxis = [{\r\n                            min: 0,\r\n                            allowDecimals: false,\r\n                            title: {\r\n                                text: 'Número de Intentos'\r\n                            }\r\n                        }];\r\n                        chart.plotOptions = {\r\n                            column: {\r\n                                stacking: 'normal'\r\n                            }\r\n                        };\r\n                        chart.series = this.attempts_series;\r\n                        chart.credits = {\r\n                            enabled: false\r\n                        };\r\n                        chart.lang = {\r\n                            noData: this.strings.no_data,\r\n                        };\r\n                        return chart;\r\n                    },\r\n\r\n                    build_chart_hardest_questions() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'column',\r\n                            backgroundColor: '#FAFAFA',\r\n                        };\r\n                        chart.title = {\r\n                            text: 'Preguntas mas dificiles',\r\n                        };\r\n                        chart.subtitle = {\r\n                            text: 'subtitulo',\r\n                        };\r\n                        chart.xAxis = {\r\n                            categories: this.hardest_categories,\r\n                        };\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.yAxis = [{\r\n                            min: 0,\r\n                            allowDecimals: false,\r\n                            title: {\r\n                                text: 'Intentos incorrectos'\r\n                            }\r\n                        }];\r\n                        chart.series = this.hardest_series;\r\n                        chart.credits = {\r\n                            enabled: false\r\n                        };\r\n                        chart.lang = {\r\n                            noData: this.strings.no_data,\r\n                        };\r\n                        return chart;\r\n                    },\r\n\r\n                    calculate_questions_attempts(quiz) {\r\n                        console.log(quiz);\r\n                        let questions = quiz.questions;\r\n                        let attempts_categories = [];\r\n                        let cont = 1;\r\n\r\n                        let correct = [],\r\n                            partcorrect = [],\r\n                            incorr = [],\r\n                            gaveup = [],\r\n                            needgrade = [],\r\n                            hardest = [];\r\n                        let co, pc, ic, ga, ng, ha = 0;\r\n\r\n                        questions.forEach(question => {\r\n                            co, pc, ic, ga, ng = 0;\r\n                            co = (question.gradedright || 0) + (question.mangrright || 0);\r\n                            pc = (question.gradedpartial || 0) + (question.mangrpartial || 0);\r\n                            ic = (question.gradedwrong || 0) + (question.mangrwrong || 0);\r\n                            ga = (question.gaveup || 0) + (question.mangaveup || 0);\r\n                            ng = (question.needsgrading || 0) + (question.mangaveup || 0) +\r\n                                (question.finished || 0) + (question.manfinished || 0);\r\n\r\n                            // console.log({ co, pc, ic, ga, ng });\r\n                            correct.push(co);\r\n                            partcorrect.push(pc);\r\n                            incorr.push(ic);\r\n                            gaveup.push(ga);\r\n                            needgrade.push(ng);\r\n\r\n                            ha = pc + ic + ga;\r\n                            hardest.push({\r\n                                qu: `P${cont}`,\r\n                                in: ha\r\n                            });\r\n\r\n                            // console.log(question);\r\n                            attempts_categories.push(`P${cont++}`);\r\n                        });\r\n\r\n                        let attempts_series = [];\r\n                        attempts_series.push({\r\n                            name: 'Correctas',\r\n                            data: correct\r\n                        });\r\n                        attempts_series.push({\r\n                            name: 'Parcialmente Correctas',\r\n                            data: partcorrect\r\n                        });\r\n                        attempts_series.push({\r\n                            name: 'Incorrectas',\r\n                            data: incorr\r\n                        });\r\n                        attempts_series.push({\r\n                            name: 'No intentadas',\r\n                            data: gaveup\r\n                        });\r\n                        attempts_series.push({\r\n                            name: 'Sin calificar',\r\n                            data: needgrade\r\n                        });\r\n\r\n                        // console.log(attempts_categories);\r\n                        // console.log(attempts_series);\r\n                        hardest.sort(this.compare_hardest);\r\n                        // console.log(hardest);\r\n\r\n\r\n                        let hardest_categories = [],\r\n                            hardest_data = [];\r\n                        hardest.forEach(element => {\r\n                            if (element.in) {\r\n                                hardest_categories.push(element.qu);\r\n                                hardest_data.push(element.in);\r\n                            }\r\n                        });\r\n\r\n                        let hardest_series = [{\r\n                            name: \"Intentos Incorrectos\",\r\n                            data: hardest_data\r\n                        }];\r\n\r\n                        this.attempts_categories = attempts_categories;\r\n                        this.attempts_series = attempts_series;\r\n                        this.hardest_categories = hardest_categories;\r\n                        this.hardest_series = hardest_series;\r\n                    },\r\n\r\n                    compare_hardest(a, b) {\r\n                        if (a.in > b.in) {\r\n                            return -1;\r\n                        }\r\n                        if (a.in < b.in) {\r\n                            return 1;\r\n                        }\r\n                        return 0;\r\n                    },\r\n\r\n                    change_quiz(value) {\r\n                        console.log(value);\r\n                    },\r\n\r\n                    update_interactions(week){\r\n                        this.loading = true;\r\n                        this.errors = [];\r\n                        let data = {\r\n                            action : \"time\",\r\n                            userid : this.userid,\r\n                            courseid : this.courseid,\r\n                            weekcode : week.weekcode,\r\n                            profile : this.render_has,\r\n                        }\r\n                        Axios({\r\n                            method:'get',\r\n                            url: M.cfg.wwwroot + \"/local/fliplearning/ajax.php\",\r\n                            params : data,\r\n                        }).then((response) => {\r\n                            if (response.status == 200 && response.data.ok) {\r\n                                // this.inverted_time = response.data.data.inverted_time;\r\n                            } else {\r\n                                this.error_messages.push(this.strings.error_network);\r\n                            }\r\n                        }).catch((e) => {\r\n                            this.errors.push(this.strings.api_error_network);\r\n                        }).finally(() => {\r\n                            this.loading = false;\r\n                        });\r\n                        return this.data;\r\n                    },\r\n\r\n                }\r\n            })\r\n        }\r\n\r\n        return {\r\n            init : init\r\n        };\r\n    });"],"file":"quiz.min.js"}