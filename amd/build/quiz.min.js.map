{"version":3,"sources":["../src/quiz.js"],"names":["define","Vue","Vuetify","Axios","Moment","Pagination","ChartDynamic","PageHeader","HelpDialog","init","content","use","component","vue","delimiters","el","vuetify","data","strings","groups","userid","courseid","timezone","render_has","profile_render","loading","errors","pages","quiz","questions_attempts_colors","hardest_questions_colors","default_quiz","attempts_categories","attempts_series","attempts_questions","hardest_categories","hardest_series","hardest_questions","help_dialog","help_contents","pluginSectionName","questions_attempts_chart","hardest_questions_chart","beforeMount","length","attempts","calculate_questions_attempts","mounted","document","querySelector","style","display","methods","get_help_content","contents","title","section_help_title","description","section_help_description","get_quiz_info_text1","text","quiz_number_questions","details","questions","get_quiz_info_text2","quiz_attempts_done","get_quiz_info_text3","quiz_students_attempts","users","build_questions_attempts_chart","chart","type","backgroundColor","fontFamily","colors","xAxis","categories","yAxis","min","allowDecimals","questions_attempts_yaxis_title","tooltip","useHTML","formatter","question_name","x","attemps","y","total_attemps","total","percentage","Math","round","series_name","series","name","of_conector","review_question","color","plotOptions","column","stacking","cursor","point","events","click","question","id","url","M","cfg","wwwroot","window","open","saveInteraction","build_hardest_questions_chart","legend","enabled","position","question_info","serie_name","value","ha","to","hardest_questions_yaxis_title","labels","format","cont","ql","correct","partcorrect","incorr","gaveup","needgrade","hardest","co","pc","ic","ga","ng","forEach","gradedright","mangrright","gradedpartial","mangrpartial","gradedwrong","mangrwrong","mangaveup","needsgrading","finished","manfinished","push","qu","pe","correct_attempt","partcorrect_attempt","incorrect_attempt","blank_attempt","needgraded_attempt","hardest_data","sort","compare_hardest","element","update_interactions","week","action","weekcode","profile","location","href","method","params","then","response","status","ok","reset_graphs","error_messages","error_network","catch","api_error_network","finally","a","b","openChartHelp","questions_attempts_help_title","questions_attempts_help_description_p1","questions_attempts_help_description_p2","questions_attempts_help_description_p3","hardest_questions_help_title","hardest_questions_help_description_p1","hardest_questions_help_description_p2","hardest_questions_help_description_p3","interaction","target","interactiontype","pluginsection","update_help_dialog","get_timezone","information","change_timezone"],"mappings":"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","sourcesContent":["define([\"local_fliplearning/vue\",\r\n        \"local_fliplearning/vuetify\",\r\n        \"local_fliplearning/axios\",\r\n        \"local_fliplearning/moment\",\r\n        \"local_fliplearning/pagination\",\r\n        \"local_fliplearning/chartdynamic\",\r\n        \"local_fliplearning/pageheader\",\r\n        \"local_fliplearning/helpdialog\",\r\n    ],\r\n    function(Vue, Vuetify, Axios, Moment, Pagination, ChartDynamic, PageHeader, HelpDialog) {\r\n        \"use strict\";\r\n\r\n        function init(content) {\r\n            // console.logs(content);\r\n            Vue.use(Vuetify);\r\n            Vue.component('pagination', Pagination);\r\n            Vue.component('chart', ChartDynamic);\r\n            Vue.component('pageheader', PageHeader);\r\n            Vue.component('helpdialog', HelpDialog);\r\n            let vue = new Vue({\r\n                delimiters: [\"[[\", \"]]\"],\r\n                el: \"#teacher_assessments\",\r\n                vuetify: new Vuetify(),\r\n                data() {\r\n                    return {\r\n                        strings: content.strings,\r\n                        groups: content.groups,\r\n                        userid: content.userid,\r\n                        courseid: content.courseid,\r\n                        timezone: content.timezone,\r\n                        render_has: content.profile_render,\r\n                        loading: false,\r\n                        errors: [],\r\n                        pages: content.pages,\r\n\r\n                        quiz: content.quiz,\r\n                        questions_attempts_colors: content.questions_attempts_colors,\r\n                        hardest_questions_colors: content.hardest_questions_colors,\r\n                        default_quiz: null,\r\n                        attempts_categories: [],\r\n                        attempts_series: [],\r\n                        attempts_questions: [],\r\n                        hardest_categories: [],\r\n                        hardest_series: [],\r\n                        hardest_questions: [],\r\n\r\n                        help_dialog: false,\r\n                        help_contents: [],\r\n\r\n                        pluginSectionName: \"teacher_assessments\",\r\n                        questions_attempts_chart: \"questions_attempts_chart\",\r\n                        hardest_questions_chart: \"hardest_questions_chart\",\r\n                    }\r\n                },\r\n                beforeMount() {\r\n                    if (this.quiz.length) {\r\n                        this.default_quiz = this.quiz[0].attempts;\r\n                        this.calculate_questions_attempts(this.default_quiz);\r\n                    };\r\n                },\r\n                mounted() {\r\n                    document.querySelector(\"#teacher_assessments_loader\").style.display = \"none\";\r\n                    document.querySelector(\"#teacher_assessments\").style.display = \"block\";\r\n                },\r\n                methods: {\r\n                    get_help_content() {\r\n                        let contents = [];\r\n                        contents.push({\r\n                            title: this.strings.section_help_title,\r\n                            description: this.strings.section_help_description,\r\n                        });\r\n                        return contents;\r\n                    },\r\n\r\n                    get_quiz_info_text1() {\r\n                        let text = '';\r\n                        if (this.default_quiz) {\r\n                            text = `* ${this.strings.quiz_number_questions}: ${this.default_quiz.details.questions}`;\r\n                        }\r\n                        return text;\r\n                    },\r\n\r\n                    get_quiz_info_text2() {\r\n                        let text = '';\r\n                        if (this.default_quiz) {\r\n                            text = `* ${this.strings.quiz_attempts_done}: ${this.default_quiz.details.attempts}`;\r\n                        }\r\n                        return text;\r\n                    },\r\n\r\n                    get_quiz_info_text3() {\r\n                        let text = '';\r\n                        if (this.default_quiz) {\r\n                            text = `* ${this.strings.quiz_students_attempts}: ${this.default_quiz.details.users}`;\r\n                        }\r\n                        return text;\r\n                    },\r\n\r\n                    build_questions_attempts_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'column',\r\n                            backgroundColor: null,\r\n                            style: { fontFamily: 'poppins' },\r\n                        };\r\n                        chart.title = {\r\n                            text: null\r\n                        };\r\n                        chart.colors = this.questions_attempts_colors;\r\n                        chart.xAxis = {\r\n                            categories: this.attempts_categories\r\n                        };\r\n                        chart.yAxis = [{\r\n                            min: 0,\r\n                            allowDecimals: false,\r\n                            title: {\r\n                                text: this.strings.questions_attempts_yaxis_title\r\n                            }\r\n                        }];\r\n                        chart.tooltip = {\r\n                            useHTML: true,\r\n                            formatter: function() {\r\n                                let question_name = this.x;\r\n                                let attemps = this.y;\r\n                                let total_attemps = this.total;\r\n                                let percentage = Math.round(Number(this.percentage));\r\n                                let series_name = this.series.name;\r\n                                let of_conector = vue.strings.of_conector;\r\n                                let review_question = vue.strings.review_question;\r\n                                return '<small>' + question_name + '</small></br>' +\r\n                                    '<b style=\"color: ' + this.color + ';\">• </b>' +\r\n                                    series_name + ': ' + attemps + ' ' + of_conector + ' ' + total_attemps +\r\n                                    ' (' + percentage + '%)' + '<br/>' +\r\n                                    '<small>' + review_question + '</small>';\r\n                            }\r\n                        };\r\n                        chart.plotOptions = {\r\n                            column: {\r\n                                stacking: 'normal'\r\n                            },\r\n                            series: {\r\n                                cursor: 'pointer',\r\n                                point: {\r\n                                    events: {\r\n                                        click: function() {\r\n                                            let question = vue.attempts_questions[this.x];\r\n                                            let id = question.id;\r\n                                            let url = M.cfg.wwwroot + '/question/preview.php?id=' + id + '&courseid=' + vue.courseid;\r\n                                            window.open(url, '_blank', 'top=50,left=50,width=900,height=600');\r\n\r\n                                            vue.saveInteraction (\r\n                                                vue.questions_attempts_chart,\r\n                                                \"selected\",\r\n                                                \"question\",\r\n                                                13\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.series = this.attempts_series;\r\n                        return chart;\r\n                    },\r\n\r\n                    build_hardest_questions_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'column',\r\n                            backgroundColor: null,\r\n                            style: { fontFamily: 'poppins' },\r\n                        };\r\n                        chart.title = {\r\n                            text: null,\r\n                        };\r\n                        chart.colors = this.hardest_questions_colors;\r\n                        chart.xAxis = {\r\n                            categories: this.hardest_categories,\r\n                        };\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.tooltip = {\r\n                            useHTML: true,\r\n                            formatter: function() {\r\n                                let position = this.point.x;\r\n                                let question_info = vue.hardest_questions[position];\r\n                                let question_name = this.x;\r\n                                let serie_name = this.series.name;\r\n                                let value = this.y;\r\n                                let of_conector = vue.strings.of_conector;\r\n                                let review_question = vue.strings.review_question;\r\n                                return '<small>' + question_name + '</small></br>' +\r\n                                    '<b style=\"color: ' + this.color + ';\">• </b>' +\r\n                                    serie_name + ': ' + question_info.ha + ' ' + of_conector + ' ' +\r\n                                    question_info.to + ' (' + value + '%)' + '<br/>' +\r\n                                    '<small>' + review_question + '</small>';\r\n                            }\r\n                        };\r\n                        chart.yAxis = [{\r\n                            min: 0,\r\n                            allowDecimals: false,\r\n                            title: {\r\n                                text: this.strings.hardest_questions_yaxis_title\r\n                            },\r\n                            labels: {\r\n                                format: '{value} %',\r\n                            },\r\n                        }];\r\n                        chart.plotOptions = {\r\n                            series: {\r\n                                cursor: 'pointer',\r\n                                point: {\r\n                                    events: {\r\n                                        click: function() {\r\n                                            let question = vue.hardest_questions[this.x];\r\n                                            let id = question.id;\r\n                                            let url = M.cfg.wwwroot + '/question/preview.php?id=' + id + '&courseid=' + vue.courseid;\r\n                                            window.open(url, '_blank', 'top=50,left=50,width=900,height=600');\r\n\r\n                                            vue.saveInteraction (\r\n                                                vue.hardest_questions_chart,\r\n                                                \"selected\",\r\n                                                \"question\",\r\n                                                13\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.series = this.hardest_series;\r\n                        return chart;\r\n                    },\r\n\r\n                    calculate_questions_attempts(quiz) {\r\n                        let questions = quiz.questions;\r\n                        let attempts_categories = [];\r\n                        let cont = 1,\r\n                            ql = \"\";\r\n\r\n                        let correct = [],\r\n                            partcorrect = [],\r\n                            incorr = [],\r\n                            gaveup = [],\r\n                            needgrade = [],\r\n                            hardest = [],\r\n                            attempts_questions = [];\r\n                        let co, pc, ic, ga, ng, to, ha = 0;\r\n\r\n                        questions.forEach(question => {\r\n                            co,\r\n                            pc,\r\n                            ic,\r\n                            ga,\r\n                            ng,\r\n                            to = 0;\r\n                            co = (question.gradedright || 0) + (question.mangrright || 0);\r\n                            pc = (question.gradedpartial || 0) + (question.mangrpartial || 0);\r\n                            ic = (question.gradedwrong || 0) + (question.mangrwrong || 0);\r\n                            ga = (question.gaveup || 0) + (question.mangaveup || 0);\r\n                            ng = (question.needsgrading || 0) + (question.mangaveup || 0) +\r\n                            (question.finished || 0) + (question.manfinished || 0);\r\n\r\n                            correct.push(co);\r\n                            partcorrect.push(pc);\r\n                            incorr.push(ic);\r\n                            gaveup.push(ga);\r\n                            needgrade.push(ng);\r\n\r\n                            ql = 'P' + cont;\r\n                            ha = pc + ic + ga;\r\n                            to = co + pc + ic + ga + ng;\r\n                            hardest.push({ id: question.id, qu: ql, ha: ha, to: to, pe: Math.round((ha * 100) / to), });\r\n                            attempts_categories.push(ql);\r\n                            attempts_questions.push(question);\r\n                            cont++;\r\n                        });\r\n\r\n                        let attempts_series = [];\r\n                        attempts_series.push({\r\n                            name: this.strings.correct_attempt,\r\n                            data: correct\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.partcorrect_attempt,\r\n                            data: partcorrect\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.incorrect_attempt,\r\n                            data: incorr\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.blank_attempt,\r\n                            data: gaveup\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.needgraded_attempt,\r\n                            data: needgrade\r\n                        });\r\n\r\n                        let hardest_categories = [],\r\n                            hardest_data = [],\r\n                            hardest_questions = [];\r\n                        hardest.sort(this.compare_hardest);\r\n                        hardest.forEach(element => {\r\n                            if (element.pe) {\r\n                                hardest_categories.push(element.qu);\r\n                                hardest_data.push(element.pe);\r\n                                hardest_questions.push(element);\r\n                            }\r\n                        });\r\n\r\n                        let hardest_series = [{\r\n                            name: this.strings.hardest_questions_yaxis_title,\r\n                            data: hardest_data\r\n                        }];\r\n\r\n                        this.attempts_categories = attempts_categories;\r\n                        this.attempts_series = attempts_series;\r\n                        this.attempts_questions = attempts_questions;\r\n                        this.hardest_categories = hardest_categories;\r\n                        this.hardest_series = hardest_series;\r\n                        this.hardest_questions = hardest_questions;\r\n\r\n                        this.saveInteraction ('quiz_selector', \"selected\", \"quiz\", 21);\r\n                    },\r\n\r\n                    update_interactions(week) {\r\n                        this.loading = true;\r\n                        this.errors = [];\r\n                        let data = {\r\n                            action: \"quiz\",\r\n                            userid: this.userid,\r\n                            courseid: this.courseid,\r\n                            weekcode: week.weekcode,\r\n                            profile: this.render_has,\r\n                            url: window.location.href,\r\n                        }\r\n                        Axios({\r\n                            method: 'get',\r\n                            url: M.cfg.wwwroot + \"/local/fliplearning/ajax.php\",\r\n                            params: data,\r\n                        }).then((response) => {\r\n                            if (response.status == 200 && response.data.ok) {\r\n                                this.quiz = response.data.data.quiz;\r\n                                if (this.quiz.length) {\r\n                                    this.default_quiz = this.quiz[0].attempts;\r\n                                    this.calculate_questions_attempts(this.default_quiz);\r\n                                } else {\r\n                                    this.reset_graphs();\r\n                                };\r\n                            } else {\r\n                                this.error_messages.push(this.strings.error_network);\r\n                            }\r\n                        }).catch((e) => {\r\n                            this.errors.push(this.strings.api_error_network);\r\n                        }).finally(() => {\r\n                            this.loading = false;\r\n                        });\r\n                        return this.data;\r\n                    },\r\n\r\n                    reset_graphs() {\r\n                        this.default_quiz = null;\r\n                        this.attempts_categories = [];\r\n                        this.attempts_series = [];\r\n                        this.attempts_questions = [];\r\n                        this.hardest_categories = [];\r\n                        this.hardest_series = [];\r\n                        this.hardest_questions = [];\r\n                    },\r\n\r\n                    compare_hardest(a, b) {\r\n                        if (a.pe > b.pe) {\r\n                            return -1;\r\n                        }\r\n                        if (a.pe < b.pe) {\r\n                            return 1;\r\n                        }\r\n                        return 0;\r\n                    },\r\n\r\n                    openChartHelp(chart) {\r\n                        let contents = [];\r\n                        if (chart == this.questions_attempts_chart) {\r\n                            contents.push({\r\n                                title: this.strings.questions_attempts_help_title,\r\n                                description: this.strings.questions_attempts_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.questions_attempts_help_description_p2,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.questions_attempts_help_description_p3,\r\n                            });\r\n                        } else if (chart == this.hardest_questions_chart) {\r\n                            contents.push({\r\n                                title: this.strings.hardest_questions_help_title,\r\n                                description: this.strings.hardest_questions_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.hardest_questions_help_description_p2,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.hardest_questions_help_description_p3,\r\n                            });\r\n                        }\r\n                        this.help_contents = contents;\r\n                        if (this.help_contents.length) {\r\n                            this.help_dialog = true;\r\n                            this.saveInteraction (chart, \"viewed\", \"chart_help_dialog\", 7);\r\n                        }\r\n                    },\r\n\r\n                    saveInteraction (component, interaction, target, interactiontype) {\r\n                        let data = {\r\n                            action : \"saveinteraction\",\r\n                            pluginsection : this.pluginSectionName,\r\n                            component,\r\n                            interaction,\r\n                            target,\r\n                            url: window.location.href,\r\n                            interactiontype,\r\n                            courseid : this.courseid,\r\n                            userid : this.userid,\r\n                        };\r\n                        Axios({\r\n                            method:'get',\r\n                            url: `${M.cfg.wwwroot}/local/fliplearning/ajax.php`,\r\n                            params : data,\r\n                        }).then((r) => {}).catch((e) => {});\r\n                    },\r\n\r\n                    update_help_dialog(value) {\r\n                        this.help_dialog = value;\r\n                    },\r\n\r\n                    get_timezone() {\r\n                        let information = `${this.strings.change_timezone} ${this.timezone}`\r\n                        return information;\r\n                    },\r\n                }\r\n            })\r\n        }\r\n\r\n        return {\r\n            init: init\r\n        };\r\n    });"],"file":"quiz.min.js"}