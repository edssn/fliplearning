{"version":3,"sources":["../src/grades.js"],"names":["define","Vue","Vuetify","Axios","Moment","Pagination","ChartDynamic","PageHeader","EmailForm","HelpDialog","init","content","use","component","vue","delimiters","el","vuetify","data","strings","groups","userid","courseid","timezone","render_has","profile_render","loading","errors","pages","grades","grade_items_average_colors","item_grades_details_colors","item_grades_distribution_colors","default_category","average_categories","average_data","selected_items","item_details","grade_item_title","grade_item_details_categories","grade_item_details_data","grade_item_distribution_categories","grade_item_distribution_data","selected_item","grade_item_users","selected_users","dialog","modulename","moduleid","email_strings","help_dialog","help_contents","beforeMount","categories","length","calculate_chart_items_average","items","item","find_first_grade_item","update_detail_charts","mounted","document","querySelector","style","display","methods","get_help_content","contents","title","section_help_title","description","section_help_description","change_category","build_grade_items_average_chart","chart","type","backgroundColor","fontFamily","text","colors","xAxis","legend","enabled","plotOptions","series","cursor","point","events","click","position","x","tooltip","shared","useHTML","formatter","points","value","y","count","gradecount","name","view_details","average","color","isInt","toFixed","grademax","grades_tooltip_average","graded_students","of_conector","student_count","yAxis","allowDecimals","max","labels","format","grades_yaxis_title","build_item_grades_details_chart","category","key","itemname","maxgrade","grade","colorByPoint","build_item_grades_distribution_chart","grades_distribution_yaxis_title","prefix","grades_distribution_tooltip_prefix","send_mail","split","students_label","capitalizeFirstLetter","students_text","stacking","borderWidth","pointPadding","groupPadding","column","subject","subject_prefix","marker","lineWidth","values","forEach","push","average_percentage","itemmodule","coursemoduleid","calculate_chart_item_grade_detail","calculate_chart_item_grades_distribution","item_data","grades_best_grade","maxrating","grades_average_grade","grades_worst_grade","minrating","greater","grades_greater_than","smaller","grades_smaller_than","users","ranges","limit","weight","min","range","index","rawgrade","user","label","i","n","string","charAt","toUpperCase","slice","update_dialog","open_chart_help","grade_items_average_help_title","grade_items_average_help_description_p1","grade_items_average_help_description_p2","grade_items_average_help_description_p3","item_grades_details_help_title","item_grades_details_help_description_p1","item_grades_details_help_description_p2","item_grades_distribution_help_title","item_grades_distribution_help_description_p1","item_grades_distribution_help_description_p2","item_grades_distribution_help_description_p3","update_help_dialog","get_timezone","information","change_timezone"],"mappings":"AAAAA,OAAM,6BAAC,CAAC,wBAAD,CACC,4BADD,CAEC,0BAFD,CAGC,2BAHD,CAIC,+BAJD,CAKC,iCALD,CAMC,+BAND,CAOC,8BAPD,CAQC,+BARD,CAAD,CAUF,SAASC,CAAT,CAAcC,CAAd,CAAuBC,CAAvB,CAA8BC,CAA9B,CAAsCC,CAAtC,CAAkDC,CAAlD,CAAgEC,CAAhE,CAA4EC,CAA5E,CAAuFC,CAAvF,CAAmG,CAC/F,aAsbA,MAAO,CACHC,IAAI,CArbR,SAAcC,CAAd,CAAuB,CAEnBV,CAAG,CAACW,GAAJ,CAAQV,CAAR,EACAD,CAAG,CAACY,SAAJ,CAAc,YAAd,CAA4BR,CAA5B,EACAJ,CAAG,CAACY,SAAJ,CAAc,OAAd,CAAuBP,CAAvB,EACAL,CAAG,CAACY,SAAJ,CAAc,YAAd,CAA4BN,CAA5B,EACAN,CAAG,CAACY,SAAJ,CAAc,WAAd,CAA2BL,CAA3B,EACAP,CAAG,CAACY,SAAJ,CAAc,YAAd,CAA4BJ,CAA5B,EACA,GAAIK,CAAAA,CAAG,CAAG,GAAIb,CAAAA,CAAJ,CAAQ,CACdc,UAAU,CAAE,CAAC,IAAD,CAAO,IAAP,CADE,CAEdC,EAAE,CAAE,SAFU,CAGdC,OAAO,CAAE,GAAIf,CAAAA,CAHC,CAIdgB,IAJc,gBAIP,CACH,MAAO,CACHC,OAAO,CAAER,CAAO,CAACQ,OADd,CAEHC,MAAM,CAAET,CAAO,CAACS,MAFb,CAGHC,MAAM,CAAEV,CAAO,CAACU,MAHb,CAIHC,QAAQ,CAAEX,CAAO,CAACW,QAJf,CAKHC,QAAQ,CAAEZ,CAAO,CAACY,QALf,CAMHC,UAAU,CAAEb,CAAO,CAACc,cANjB,CAOHC,OAAO,GAPJ,CAQHC,MAAM,CAAE,EARL,CASHC,KAAK,CAAEjB,CAAO,CAACiB,KATZ,CAWHC,MAAM,CAAElB,CAAO,CAACkB,MAXb,CAYHC,0BAA0B,CAAEnB,CAAO,CAACmB,0BAZjC,CAaHC,0BAA0B,CAAEpB,CAAO,CAACoB,0BAbjC,CAcHC,+BAA+B,CAAErB,CAAO,CAACqB,+BAdtC,CAeHC,gBAAgB,CAAE,IAff,CAgBHC,kBAAkB,CAAE,EAhBjB,CAiBHC,YAAY,CAAE,EAjBX,CAkBHC,cAAc,CAAE,EAlBb,CAmBHC,YAAY,CAAE,EAnBX,CAqBHC,gBAAgB,CAAE,EArBf,CAsBHC,6BAA6B,CAAE,EAtB5B,CAuBHC,uBAAuB,CAAE,EAvBtB,CAyBHC,kCAAkC,CAAE,EAzBjC,CA0BHC,4BAA4B,CAAE,EA1B3B,CA4BHC,aAAa,CAAE,IA5BZ,CA8BHC,gBAAgB,CAAE,IA9Bf,CA+BHC,cAAc,CAAE,EA/Bb,CAgCHC,MAAM,GAhCH,CAiCHC,UAAU,CAAE,EAjCT,CAkCHC,QAAQ,GAlCL,CAmCHC,aAAa,CAAEtC,CAAO,CAACQ,OAAR,CAAgB8B,aAnC5B,CAqCHC,WAAW,GArCR,CAsCHC,aAAa,CAAE,EAtCZ,CAwCV,CA7Ca,CA8CdC,WA9Cc,uBA8CA,CACV,GAAI,KAAKvB,MAAL,CAAYwB,UAAZ,CAAuBC,MAA3B,CAAmC,CAC/B,KAAKrB,gBAAL,CAAwB,KAAKJ,MAAL,CAAYwB,UAAZ,CAAuB,CAAvB,CAAxB,CACA,KAAKE,6BAAL,CAAmC,KAAKtB,gBAAL,CAAsBuB,KAAzD,EACA,GAAIC,CAAAA,CAAI,CAAG,KAAKC,qBAAL,CAA2B,KAAKzB,gBAAL,CAAsBuB,KAAjD,CAAX,CACA,KAAKG,oBAAL,CAA0BF,CAA1B,CACH,CACJ,CArDa,CAsDdG,OAtDc,mBAsDJ,CACNC,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,EAA2CC,KAA3C,CAAiDC,OAAjD,CAA2D,MAA3D,CACAH,QAAQ,CAACC,aAAT,CAAuB,SAAvB,EAAkCC,KAAlC,CAAwCC,OAAxC,CAAkD,OACrD,CAzDa,CA0DdC,OAAO,CAAE,CACLC,gBADK,4BACc,CACf,GAAIC,CAAAA,CAAQ,CAAG,CACD,CACVC,KAAK,CAAE,KAAKjD,OAAL,CAAakD,kBADV,CAEVC,WAAW,CAAE,KAAKnD,OAAL,CAAaoD,wBAFhB,CADC,CAAf,CAKA,MAAOJ,CAAAA,CACV,CARI,CAULK,eAVK,0BAUWhB,CAVX,CAUkB,CACnB,KAAKD,6BAAL,CAAmCC,CAAnC,EACA,GAAIC,CAAAA,CAAI,CAAG,KAAKC,qBAAL,CAA2BF,CAA3B,CAAX,CACA,KAAKG,oBAAL,CAA0BF,CAA1B,CACH,CAdI,CAgBLgB,+BAhBK,2CAgB6B,CAC9B,GAAIC,CAAAA,CAAK,GAAT,CACAA,CAAK,CAACA,KAAN,CAAc,CACVC,IAAI,CAAE,QADI,CAEVC,eAAe,CAAE,IAFP,CAGVb,KAAK,CAAE,CAAEc,UAAU,CAAE,SAAd,CAHG,CAAd,CAKAH,CAAK,CAACN,KAAN,CAAc,CACVU,IAAI,CAAE,IADI,CAAd,CAGAJ,CAAK,CAACK,MAAN,CAAe,KAAKjD,0BAApB,CACA4C,CAAK,CAACM,KAAN,CAAc,CACV3B,UAAU,CAAE,KAAKnB,kBADP,CAAd,CAGAwC,CAAK,CAACO,MAAN,CAAe,CACXC,OAAO,GADI,CAAf,CAGAR,CAAK,CAACS,WAAN,CAAoB,CAChBC,MAAM,CAAE,CACJC,MAAM,CAAE,SADJ,CAEJC,KAAK,CAAE,CACHC,MAAM,CAAE,CACJC,KAAK,CAAE,gBAAW,IACVC,CAAAA,CAAQ,CAAG,KAAKC,CADN,CAEVjC,CAAI,CAAG3C,CAAG,CAACsB,cAAJ,CAAmBqD,CAAnB,CAFG,CAGd3E,CAAG,CAAC6C,oBAAJ,CAAyBF,CAAzB,CACH,CALG,CADL,CAFH,CADQ,CAApB,CAcAiB,CAAK,CAACiB,OAAN,CAAgB,CACZC,MAAM,GADM,CAEZC,OAAO,GAFK,CAGZC,SAAS,CAAE,oBAAW,IACdL,CAAAA,CAAQ,CAAG,KAAKM,MAAL,CAAY,CAAZ,EAAeT,KAAf,CAAqBI,CADlB,CAEdM,CAAK,CAAG,KAAKC,CAFC,CAGdxC,CAAI,CAAG3C,CAAG,CAACsB,cAAJ,CAAmBqD,CAAnB,CAHO,CAIdS,CAAK,CAAGzC,CAAI,CAAC0C,UAJC,CAKdC,CAAI,CAAG,KAAKV,CALE,CAMdW,CAAY,CAAGvF,CAAG,CAACK,OAAJ,CAAYkF,YANb,CAOdC,CAAO,EAAU7C,CAAI,CAAC6C,OAPR,CAQdC,CAAK,CAAG,KAAKR,MAAL,CAAY,CAAZ,EAAeQ,KART,CASlBP,CAAK,CAAGlF,CAAG,CAAC0F,KAAJ,CAAUR,CAAV,EAAmBA,CAAnB,CAA2BA,CAAK,CAACS,OAAN,CAAc,CAAd,CAAnC,CACAH,CAAO,CAAGxF,CAAG,CAAC0F,KAAJ,CAAUF,CAAV,EAAqBA,CAArB,CAA+BA,CAAO,CAACG,OAAR,CAAgB,CAAhB,CAAzC,CACA,GAAIC,CAAAA,CAAQ,CAAGjD,CAAI,CAACiD,QAApB,CACA,MAAO,UAAYN,CAAZ,mCACmBG,CADnB,CAC2B,iBAD3B,CAEHzF,CAAG,CAACK,OAAJ,CAAYwF,sBAFT,CAEkC,IAFlC,CAEyCL,CAFzC,CAEmD,GAFnD,CAEyDI,CAFzD,CAEoE,IAFpE,CAE2EV,CAF3E,8BAGmBO,CAHnB,CAG2B,iBAH3B,CAIHzF,CAAG,CAACK,OAAJ,CAAYyF,eAJT,CAI2B,IAJ3B,CAIkCV,CAJlC,CAI0C,GAJ1C,CAKHpF,CAAG,CAACK,OAAJ,CAAY0F,WALT,CAKuB,GALvB,CAK6B/F,CAAG,CAACe,MAAJ,CAAWiF,aALxC,gBAMST,CANT,CAMwB,UAClC,CAtBW,CAAhB,CAwBA3B,CAAK,CAACqC,KAAN,CAAc,CAAC,CACXC,aAAa,GADF,CAEXC,GAAG,CAAE,GAFM,CAGXC,MAAM,CAAE,CACJC,MAAM,CAAE,WADJ,CAHG,CAMX/C,KAAK,CAAE,CACHU,IAAI,CAAE,KAAK3D,OAAL,CAAaiG,kBADhB,CANI,CAAD,CAAd,CAUA1C,CAAK,CAACU,MAAN,CAAe,CAAC,CACZlE,IAAI,CAAE,KAAKiB,YADC,CAAD,CAAf,CAGA,MAAOuC,CAAAA,CACV,CArFI,CAuFL2C,+BAvFK,2CAuF6B,CAC9B,GAAI3C,CAAAA,CAAK,GAAT,CACAA,CAAK,CAACA,KAAN,CAAc,CACVC,IAAI,CAAE,KADI,CAEVC,eAAe,CAAE,IAFP,CAGVb,KAAK,CAAE,CAAEc,UAAU,CAAE,SAAd,CAHG,CAAd,CAKAH,CAAK,CAACN,KAAN,CAAc,CACVU,IAAI,CAAE,IADI,CAAd,CAGAJ,CAAK,CAACK,MAAN,CAAe,KAAKhD,0BAApB,CACA2C,CAAK,CAACM,KAAN,CAAc,CACVL,IAAI,CAAE,UADI,CAAd,CAGAD,CAAK,CAACO,MAAN,CAAe,CACXC,OAAO,GADI,CAAf,CAGAR,CAAK,CAACiB,OAAN,CAAgB,CACZC,MAAM,GADM,CAEZC,OAAO,GAFK,CAGZC,SAAS,CAAE,oBAAW,IACdwB,CAAAA,CAAQ,CAAG,KAAKvB,MAAL,CAAY,CAAZ,EAAewB,GADZ,CAEdnB,CAAI,CAAGtF,CAAG,CAAC6B,aAAJ,CAAkB6E,QAFX,CAGdC,CAAQ,CAAG3G,CAAG,CAAC6B,aAAJ,CAAkB+D,QAHf,CAIdgB,CAAK,CAAG,KAAKzB,CAJC,CAKdM,CAAK,CAAG,KAAKR,MAAL,CAAY,CAAZ,EAAeQ,KALT,CAMlBmB,CAAK,CAAG5G,CAAG,CAAC0F,KAAJ,CAAUkB,CAAV,EAAmBA,CAAnB,CAA2BA,CAAK,CAACjB,OAAN,CAAc,CAAd,CAAnC,CACA,MAAO,UAAYL,CAAZ,oCACmBG,CADnB,CAC2B,iBAD3B,CAEHe,CAFG,CAEQ,IAFR,CAEeI,CAFf,CAEuB,GAFvB,CAE6BD,CAF7B,CAEwC,OAClD,CAbW,CAAhB,CAeA/C,CAAK,CAACqC,KAAN,CAAc,CAAC,CACX3C,KAAK,CAAE,CACHc,OAAO,GADJ,CADI,CAAD,CAAd,CAKAR,CAAK,CAACU,MAAN,CAAe,CAAC,CACZuC,YAAY,GADA,CAEZzG,IAAI,CAAE,KAAKsB,uBAFC,CAAD,CAAf,CAIA,MAAOkC,CAAAA,CACV,CAjII,CAmILkD,oCAnIK,gDAmIkC,CACnC,GAAIlD,CAAAA,CAAK,GAAT,CACAA,CAAK,CAACA,KAAN,CAAc,CACVE,eAAe,CAAE,IADP,CAEVb,KAAK,CAAE,CAAEc,UAAU,CAAE,SAAd,CAFG,CAAd,CAIAH,CAAK,CAACN,KAAN,CAAc,CACVU,IAAI,CAAE,IADI,CAAd,CAGAJ,CAAK,CAACK,MAAN,CAAe,KAAK/C,+BAApB,CACA0C,CAAK,CAACM,KAAN,CAAc,CACV3B,UAAU,CAAE,KAAKZ,kCADP,CAAd,CAGAiC,CAAK,CAACqC,KAAN,CAAc,CAAC,CACX3C,KAAK,CAAE,CACHU,IAAI,CAAE,KAAK3D,OAAL,CAAa0G,+BADhB,CADI,CAIXb,aAAa,GAJF,CAAD,CAAd,CAMAtC,CAAK,CAACO,MAAN,CAAe,CACXC,OAAO,GADI,CAAf,CAGAR,CAAK,CAACiB,OAAN,CAAgB,CACZE,OAAO,GADK,CAEZC,SAAS,CAAE,oBAAW,IACdgC,CAAAA,CAAM,CAAGhH,CAAG,CAACK,OAAJ,CAAY4G,kCADP,CAEdC,CAAS,CAAGlH,CAAG,CAACK,OAAJ,CAAY6G,SAFV,CAGd5B,CAAI,CAAG,KAAKV,CAAL,CAAOuC,KAAP,CAAa,OAAb,EAAsB,CAAtB,GAA4B,OAHrB,CAIdjC,CAAK,CAAG,KAAKC,CAJC,CAKdiC,CAAc,CAAGpH,CAAG,CAACqH,qBAAJ,CAA0BrH,CAAG,CAACK,OAAJ,CAAYiH,aAAtC,CALH,CAMlB,MAAO,UAAYN,CAAZ,CAAqB,IAArB,CAA4B1B,CAA5B,mCACmB,KAAKG,KADxB,CACgC,iBADhC,CAEH2B,CAFG,CAEc,IAFd,CAEqBlC,CAFrB,iBAGSgC,CAHT,CAGqB,UAC/B,CAZW,CAAhB,CAcAtD,CAAK,CAACS,WAAN,CAAoB,CAChBC,MAAM,CAAE,CACJiD,QAAQ,CAAE,QADN,CAEJC,WAAW,CAAE,CAFT,CAGJC,YAAY,CAAE,CAHV,CAIJC,YAAY,CAAE,CAJV,CADQ,CAOhBC,MAAM,CAAE,CACJnD,KAAK,CAAE,CACHC,MAAM,CAAE,CACJC,KAAK,CAAE,gBAAW,CACd,GAAIC,CAAAA,CAAQ,CAAG,KAAKC,CAApB,CACA5E,CAAG,CAAC+B,cAAJ,CAAqB/B,CAAG,CAAC8B,gBAAJ,CAAqB6C,CAArB,CAArB,CACA3E,CAAG,CAACmC,aAAJ,CAAkByF,OAAlB,CAA4B5H,CAAG,CAACmC,aAAJ,CAAkB0F,cAAlB,CACxB,KADwB,CAChB7H,CAAG,CAAC6B,aAAJ,CAAkB6E,QAD9B,CAEA1G,CAAG,CAACgC,MAAJ,GACH,CAPG,CADL,CADH,CAPQ,CAApB,CAqBA4B,CAAK,CAACU,MAAN,CAAe,CAAC,CACZT,IAAI,CAAE,QADM,CAEZzD,IAAI,CAAE,KAAKwB,4BAFC,CAAD,CAGZ,CACCiC,IAAI,CAAE,QADP,CAECzD,IAAI,CAAE,KAAKwB,4BAFZ,CAGCkG,MAAM,CAAE,CACJC,SAAS,CAAE,CADP,CAHT,CAHY,CAAf,CAUA,MAAOnE,CAAAA,CACV,CAvMI,CAyMLnB,6BAzMK,wCAyMyBC,CAzMzB,CAyMgC,IAC7BsF,CAAAA,CAAM,CAAG,EADoB,CAE7BzF,CAAU,CAAG,EAFgB,CAGjCG,CAAK,CAACuF,OAAN,CAAc,SAAAtF,CAAI,CAAI,CAClBqF,CAAM,CAACE,IAAP,CAAYvF,CAAI,CAACwF,kBAAjB,EACA5F,CAAU,CAAC2F,IAAX,CAAgBvF,CAAI,CAAC+D,QAArB,CACH,CAHD,EAIA,KAAKtF,kBAAL,CAA0BmB,CAA1B,CACA,KAAKlB,YAAL,CAAoB2G,CAApB,CACA,KAAK1G,cAAL,CAAsBoB,CACzB,CAnNI,CAqNLG,oBArNK,+BAqNgBF,CArNhB,CAqNsB,CACvB,KAAKV,UAAL,CAAkBU,CAAI,CAACyF,UAAvB,CACA,KAAKlG,QAAL,CAAgBS,CAAI,CAAC0F,cAArB,CACA,KAAK7G,gBAAL,CAAwBmB,CAAI,CAAC+D,QAA7B,CACA,KAAK4B,iCAAL,CAAuC3F,CAAvC,EACA,KAAK4F,wCAAL,CAA8C5F,CAA9C,CACH,CA3NI,CA6NL2F,iCA7NK,4CA6N6B3F,CA7N7B,CA6NmC,CACpC,KAAKd,aAAL,CAAqBc,CAArB,CACA,GAAI6F,CAAAA,CAAS,CAAG,CAAC,CACblD,IAAI,CAAE,KAAKjF,OAAL,CAAaoI,iBADN,CAEbtD,CAAC,CAAE,CAAOxC,CAAI,CAAC+F,SAAZ,EAA0B,CAFhB,CAAD,CAGb,CACCpD,IAAI,CAAE,KAAKjF,OAAL,CAAasI,oBADpB,CAECxD,CAAC,CAAE,CAAOxC,CAAI,CAAC6C,OAAZ,EAAwB,CAF5B,CAHa,CAMb,CACCF,IAAI,CAAE,KAAKjF,OAAL,CAAauI,kBADpB,CAECzD,CAAC,CAAE,CAAOxC,CAAI,CAACkG,SAAZ,EAA0B,CAF9B,CANa,CAAhB,CAUA,KAAKnH,uBAAL,CAA+B8G,CAClC,CA1OI,CA4OLD,wCA5OK,mDA4OoC5F,CA5OpC,CA4O0C,YACvCmG,CAAO,CAAG,KAAKzI,OAAL,CAAa0I,mBADgB,CAEvCC,CAAO,CAAG,KAAK3I,OAAL,CAAa4I,mBAFgB,CAGvC1G,CAAU,CAAG,WACVuG,CADU,mBAEVA,CAFU,mBAGVA,CAHU,mBAIVA,CAJU,mBAKVA,CALU,mBAMVE,CANU,SAH0B,CAWvChB,CAAM,CAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CAX8B,CAYvCkB,CAAK,CAAG,CACR,EADQ,CAER,EAFQ,CAGR,EAHQ,CAIR,EAJQ,CAKR,EALQ,CAMR,EANQ,CAZ+B,CAoB3C,GAAIvG,CAAJ,CAAU,IAEFwG,CAAAA,CAAM,CAAG,EAFP,CAGFvD,CAAQ,CAAGjD,CAAI,CAACiD,QAHd,CAIFwD,CAAK,CAAGxD,CAJN,CACQ,CAAC,EAAD,CAAM,EAAN,CAAW,EAAX,CAAgB,EAAhB,CAAqB,EAArB,CAA0B,CAA1B,CAId,CAAQqC,OAAR,CAAgB,SAAAoB,CAAM,CAAI,CACtB,GAAIzC,CAAAA,CAAK,CAAGhB,CAAQ,CAAGyD,CAAvB,CACAF,CAAM,CAACjB,IAAP,CAAY,CAAE/B,GAAG,CAAEiD,CAAP,CAAcE,GAAG,CAAE1C,CAAnB,CAA0BxB,KAAK,CAAE,CAAjC,CAAZ,EACAgE,CAAK,CAAGxC,CAAK,CAAG,EACnB,CAJD,EAMAjE,CAAI,CAAC5B,MAAL,CAAYkH,OAAZ,CAAoB,SAAArB,CAAK,CAAI,CACzBuC,CAAM,CAAClB,OAAP,CAAe,SAACsB,CAAD,CAAQC,CAAR,CAAkB,CAC7B,GAAI5C,CAAK,CAAC6C,QAAN,EAAkBF,CAAK,CAACD,GAAxB,EAA+B1C,CAAK,CAAC6C,QAAN,EAAkBF,CAAK,CAACpD,GAA3D,CAAgE,CAC5DoD,CAAK,CAACnE,KAAN,GACA8D,CAAK,CAACM,CAAD,CAAL,CAAatB,IAAb,CAAkBtB,CAAK,CAAC8C,IAAxB,CACH,CACJ,CALD,CAMH,CAPD,EASA1B,CAAM,CAAG,EAAT,CACAmB,CAAM,CAAClB,OAAP,CAAe,SAACsB,CAAD,CAAQC,CAAR,CAAkB,IACzBrD,CAAAA,CAAG,CAAG,CAAI,CAACT,KAAL,CAAW6D,CAAK,CAACpD,GAAjB,EAAwBoD,CAAK,CAACpD,GAA9B,CAAoCoD,CAAK,CAACpD,GAAN,CAAUR,OAAV,CAAkB,CAAlB,CADjB,CAEzB2D,CAAG,CAAG,CAAI,CAAC5D,KAAL,CAAW6D,CAAK,CAACD,GAAjB,EAAwBC,CAAK,CAACD,GAA9B,CAAoCC,CAAK,CAACD,GAAN,CAAU3D,OAAV,CAAkB,CAAlB,CAFjB,CAGzBgE,CAAK,WAAMxD,CAAN,eAAemD,CAAf,iBAA0B/G,CAAU,CAACiH,CAAD,CAApC,CAHoB,CAI7BjH,CAAU,CAACiH,CAAD,CAAV,CAAoBG,CAApB,CACA3B,CAAM,CAACE,IAAP,CAAYqB,CAAK,CAACnE,KAAlB,CACH,CAND,CAOH,CACD,KAAKtD,gBAAL,CAAwBoH,CAAxB,CACA,KAAKvH,kCAAL,CAA0CY,CAA1C,CACI,KAAKX,4BAAL,CAAoCoG,CAC3C,CAhSI,CAkSLpF,qBAlSK,gCAkSiBF,CAlSjB,CAkSwB,CACzB,GAAIC,CAAAA,CAAJ,CACA,GAAID,CAAK,CAACF,MAAV,CAAkB,CAEd,OADI4C,CAAAA,CAAK,CAAG1C,CAAK,CAACF,MAClB,CAASoH,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGxE,CAApB,CAA2BwE,CAAC,EAA5B,CAAgC,CAC5B,GAAyB,CAArB,CAAAlH,CAAK,CAACkH,CAAD,CAAL,CAASlB,SAAb,CAA4B,CACxB/F,CAAI,CAAGD,CAAK,CAACkH,CAAD,CAAZ,CACA,KACH,CACJ,CACD,GAAI,CAACjH,CAAL,CAAW,CACPA,CAAI,CAAGD,CAAK,CAAC,CAAD,CACf,CACJ,CACD,MAAOC,CAAAA,CACV,CAjTI,CAmTL+C,KAnTK,gBAmTCmE,CAnTD,CAmTI,CACL,MAAiB,EAAV,EAAAA,CAAC,CAAG,CACd,CArTI,CAuTLxC,qBAvTK,gCAuTiByC,CAvTjB,CAuTyB,CAC1B,MAAOA,CAAAA,CAAM,CAACC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,GAAiCF,CAAM,CAACG,KAAP,CAAa,CAAb,CAC3C,CAzTI,CA2TLC,aA3TK,wBA2TShF,CA3TT,CA2TgB,CACjB,KAAKlD,MAAL,CAAckD,CACjB,CA7TI,CA+TLiF,eA/TK,0BA+TWvG,CA/TX,CA+TkB,CACnB,GAAIP,CAAAA,CAAQ,CAAG,EAAf,CACA,GAAa,qBAAT,EAAAO,CAAJ,CAAoC,CAChCP,CAAQ,CAAC6E,IAAT,CAAc,CACV5E,KAAK,CAAE,KAAKjD,OAAL,CAAa+J,8BADV,CAEV5G,WAAW,CAAE,KAAKnD,OAAL,CAAagK,uCAFhB,CAAd,EAIAhH,CAAQ,CAAC6E,IAAT,CAAc,CACV1E,WAAW,CAAE,KAAKnD,OAAL,CAAaiK,uCADhB,CAAd,EAGAjH,CAAQ,CAAC6E,IAAT,CAAc,CACV1E,WAAW,CAAE,KAAKnD,OAAL,CAAakK,uCADhB,CAAd,CAGH,CAXD,IAWO,IAAa,qBAAT,EAAA3G,CAAJ,CAAoC,CACvCP,CAAQ,CAAC6E,IAAT,CAAc,CACV5E,KAAK,CAAE,KAAKjD,OAAL,CAAamK,8BADV,CAEVhH,WAAW,CAAE,KAAKnD,OAAL,CAAaoK,uCAFhB,CAAd,EAIApH,CAAQ,CAAC6E,IAAT,CAAc,CACV1E,WAAW,CAAE,KAAKnD,OAAL,CAAaqK,uCADhB,CAAd,CAGH,CARM,IAQA,IAAa,0BAAT,EAAA9G,CAAJ,CAAyC,CAC5CP,CAAQ,CAAC6E,IAAT,CAAc,CACV5E,KAAK,CAAE,KAAKjD,OAAL,CAAasK,mCADV,CAEVnH,WAAW,CAAE,KAAKnD,OAAL,CAAauK,4CAFhB,CAAd,EAIAvH,CAAQ,CAAC6E,IAAT,CAAc,CACV1E,WAAW,CAAE,KAAKnD,OAAL,CAAawK,4CADhB,CAAd,EAGAxH,CAAQ,CAAC6E,IAAT,CAAc,CACV1E,WAAW,CAAE,KAAKnD,OAAL,CAAayK,4CADhB,CAAd,CAGH,CACD,KAAKzI,aAAL,CAAqBgB,CAArB,CACA,GAAI,KAAKhB,aAAL,CAAmBG,MAAvB,CAA+B,CAC3B,KAAKJ,WAAL,GACH,CACJ,CApWI,CAsWL2I,kBAtWK,6BAsWc7F,CAtWd,CAsWqB,CACtB,KAAK9C,WAAL,CAAmB8C,CACtB,CAxWI,CA0WL8F,YA1WK,wBA0WU,CACX,GAAIC,CAAAA,CAAW,WAAM,KAAK5K,OAAL,CAAa6K,eAAnB,aAAsC,KAAKzK,QAA3C,CAAf,CACA,MAAOwK,CAAAA,CACV,CA7WI,CA1DK,CAAR,CA0ab,CAEM,CAGV,CApcC,CAAN","sourcesContent":["define([\"local_fliplearning/vue\",\r\n        \"local_fliplearning/vuetify\",\r\n        \"local_fliplearning/axios\",\r\n        \"local_fliplearning/moment\",\r\n        \"local_fliplearning/pagination\",\r\n        \"local_fliplearning/chartdynamic\",\r\n        \"local_fliplearning/pageheader\",\r\n        \"local_fliplearning/emailform\",\r\n        \"local_fliplearning/helpdialog\",\r\n    ],\r\n    function(Vue, Vuetify, Axios, Moment, Pagination, ChartDynamic, PageHeader, EmailForm, HelpDialog) {\r\n        \"use strict\";\r\n\r\n        function init(content) {\r\n            // console.log(content);\r\n            Vue.use(Vuetify);\r\n            Vue.component('pagination', Pagination);\r\n            Vue.component('chart', ChartDynamic);\r\n            Vue.component('pageheader', PageHeader);\r\n            Vue.component('emailform', EmailForm);\r\n            Vue.component('helpdialog', HelpDialog);\r\n            let vue = new Vue({\r\n                delimiters: [\"[[\", \"]]\"],\r\n                el: \"#grades\",\r\n                vuetify: new Vuetify(),\r\n                data() {\r\n                    return {\r\n                        strings: content.strings,\r\n                        groups: content.groups,\r\n                        userid: content.userid,\r\n                        courseid: content.courseid,\r\n                        timezone: content.timezone,\r\n                        render_has: content.profile_render,\r\n                        loading: false,\r\n                        errors: [],\r\n                        pages: content.pages,\r\n\r\n                        grades: content.grades,\r\n                        grade_items_average_colors: content.grade_items_average_colors,\r\n                        item_grades_details_colors: content.item_grades_details_colors,\r\n                        item_grades_distribution_colors: content.item_grades_distribution_colors,\r\n                        default_category: null,\r\n                        average_categories: [],\r\n                        average_data: [],\r\n                        selected_items: [],\r\n                        item_details: [],\r\n\r\n                        grade_item_title: \"\",\r\n                        grade_item_details_categories: [],\r\n                        grade_item_details_data: [],\r\n\r\n                        grade_item_distribution_categories: [],\r\n                        grade_item_distribution_data: [],\r\n\r\n                        selected_item: null,\r\n\r\n                        grade_item_users: null,\r\n                        selected_users: [],\r\n                        dialog: false,\r\n                        modulename: \"\",\r\n                        moduleid: false,\r\n                        email_strings: content.strings.email_strings,\r\n\r\n                        help_dialog: false,\r\n                        help_contents: [],\r\n                    }\r\n                },\r\n                beforeMount() {\r\n                    if (this.grades.categories.length) {\r\n                        this.default_category = this.grades.categories[0];\r\n                        this.calculate_chart_items_average(this.default_category.items);\r\n                        let item = this.find_first_grade_item(this.default_category.items);\r\n                        this.update_detail_charts(item);\r\n                    };\r\n                },\r\n                mounted() {\r\n                    document.querySelector(\"#sessions-loader\").style.display = \"none\";\r\n                    document.querySelector(\"#grades\").style.display = \"block\";\r\n                },\r\n                methods: {\r\n                    get_help_content() {\r\n                        let contents = [];\r\n                        contents.push({\r\n                            title: this.strings.section_help_title,\r\n                            description: this.strings.section_help_description,\r\n                        });\r\n                        return contents;\r\n                    },\r\n\r\n                    change_category(items) {\r\n                        this.calculate_chart_items_average(items);\r\n                        let item = this.find_first_grade_item(items);\r\n                        this.update_detail_charts(item);\r\n                    },\r\n\r\n                    build_grade_items_average_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'column',\r\n                            backgroundColor: null,\r\n                            style: { fontFamily: 'poppins' },\r\n                        };\r\n                        chart.title = {\r\n                            text: null\r\n                        };\r\n                        chart.colors = this.grade_items_average_colors;\r\n                        chart.xAxis = {\r\n                            categories: this.average_categories\r\n                        };\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.plotOptions = {\r\n                            series: {\r\n                                cursor: 'pointer',\r\n                                point: {\r\n                                    events: {\r\n                                        click: function() {\r\n                                            let position = this.x;\r\n                                            let item = vue.selected_items[position];\r\n                                            vue.update_detail_charts(item);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.tooltip = {\r\n                            shared: true,\r\n                            useHTML: true,\r\n                            formatter: function() {\r\n                                let position = this.points[0].point.x;\r\n                                let value = this.y;\r\n                                let item = vue.selected_items[position];\r\n                                let count = item.gradecount;\r\n                                let name = this.x;\r\n                                let view_details = vue.strings.view_details;\r\n                                let average = Number(item.average);\r\n                                let color = this.points[0].color;\r\n                                value = vue.isInt(value) ? value : value.toFixed(2);\r\n                                average = vue.isInt(average) ? average : average.toFixed(2);\r\n                                let grademax = item.grademax;\r\n                                return '<small>' + name + '</small><br/>' +\r\n                                    '<b style=\"color: ' + color + ';\">• </b>' +\r\n                                    vue.strings.grades_tooltip_average + ': ' + average + '/' + grademax + ' (' + value + ' %)<br/>' +\r\n                                    '<b style=\"color: ' + color + ';\">• </b>' +\r\n                                    vue.strings.graded_students + ': ' + count + ' ' +\r\n                                    vue.strings.of_conector + ' ' + vue.grades.student_count + '<br/>' +\r\n                                    '<small>' + view_details + '</small>';\r\n                            }\r\n                        };\r\n                        chart.yAxis = [{\r\n                            allowDecimals: false,\r\n                            max: 100,\r\n                            labels: {\r\n                                format: '{value} %',\r\n                            },\r\n                            title: {\r\n                                text: this.strings.grades_yaxis_title,\r\n                            }\r\n                        }];\r\n                        chart.series = [{\r\n                            data: this.average_data,\r\n                        }];\r\n                        return chart;\r\n                    },\r\n\r\n                    build_item_grades_details_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'bar',\r\n                            backgroundColor: null,\r\n                            style: { fontFamily: 'poppins' },\r\n                        };\r\n                        chart.title = {\r\n                            text: null,\r\n                        };\r\n                        chart.colors = this.item_grades_details_colors;\r\n                        chart.xAxis = {\r\n                            type: 'category',\r\n                        };\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.tooltip = {\r\n                            shared: true,\r\n                            useHTML: true,\r\n                            formatter: function() {\r\n                                let category = this.points[0].key;\r\n                                let name = vue.selected_item.itemname;\r\n                                let maxgrade = vue.selected_item.grademax;\r\n                                let grade = this.y;\r\n                                let color = this.points[0].color;\r\n                                grade = vue.isInt(grade) ? grade : grade.toFixed(2);\r\n                                return '<small>' + name + '</small> <br/>' +\r\n                                    '<b style=\"color: ' + color + ';\">• </b>' +\r\n                                    category + ': ' + grade + '/' + maxgrade + '<br/>';\r\n                            }\r\n                        };\r\n                        chart.yAxis = [{\r\n                            title: {\r\n                                enabled: false,\r\n                            }\r\n                        }];\r\n                        chart.series = [{\r\n                            colorByPoint: true,\r\n                            data: this.grade_item_details_data,\r\n                        }];\r\n                        return chart;\r\n                    },\r\n\r\n                    build_item_grades_distribution_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            backgroundColor: null,\r\n                            style: { fontFamily: 'poppins' },\r\n                        };\r\n                        chart.title = {\r\n                            text: null,\r\n                        };\r\n                        chart.colors = this.item_grades_distribution_colors;\r\n                        chart.xAxis = {\r\n                            categories: this.grade_item_distribution_categories\r\n                        };\r\n                        chart.yAxis = [{\r\n                            title: {\r\n                                text: this.strings.grades_distribution_yaxis_title,\r\n                            },\r\n                            allowDecimals: false,\r\n                        }];\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.tooltip = {\r\n                            useHTML: true,\r\n                            formatter: function() {\r\n                                let prefix = vue.strings.grades_distribution_tooltip_prefix;\r\n                                let send_mail = vue.strings.send_mail;\r\n                                let name = this.x.split('<br/>')[0] || 'Rango';\r\n                                let value = this.y;\r\n                                let students_label = vue.capitalizeFirstLetter(vue.strings.students_text);\r\n                                return '<small>' + prefix + ': ' + name + '</small><br/>' +\r\n                                    '<b style=\"color: ' + this.color + ';\">• </b>' +\r\n                                    students_label + ': ' + value + ' <br/>' +\r\n                                    '<small>' + send_mail + '</small>';\r\n                            }\r\n                        };\r\n                        chart.plotOptions = {\r\n                            series: {\r\n                                stacking: 'normal',\r\n                                borderWidth: 1,\r\n                                pointPadding: 0,\r\n                                groupPadding: 0,\r\n                            },\r\n                            column: {\r\n                                point: {\r\n                                    events: {\r\n                                        click: function() {\r\n                                            let position = this.x;\r\n                                            vue.selected_users = vue.grade_item_users[position];\r\n                                            vue.email_strings.subject = vue.email_strings.subject_prefix +\r\n                                                \" - \" + vue.selected_item.itemname;\r\n                                            vue.dialog = true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.series = [{\r\n                            type: 'column',\r\n                            data: this.grade_item_distribution_data\r\n                        }, {\r\n                            type: 'spline',\r\n                            data: this.grade_item_distribution_data,\r\n                            marker: {\r\n                                lineWidth: 1,\r\n                            }\r\n                        }];\r\n                        return chart;\r\n                    },\r\n\r\n                    calculate_chart_items_average(items) {\r\n                        let values = [];\r\n                        let categories = [];\r\n                        items.forEach(item => {\r\n                            values.push(item.average_percentage);\r\n                            categories.push(item.itemname);\r\n                        });\r\n                        this.average_categories = categories;\r\n                        this.average_data = values;\r\n                        this.selected_items = items;\r\n                    },\r\n\r\n                    update_detail_charts(item) {\r\n                        this.modulename = item.itemmodule;\r\n                        this.moduleid = item.coursemoduleid;\r\n                        this.grade_item_title = item.itemname;\r\n                        this.calculate_chart_item_grade_detail(item);\r\n                        this.calculate_chart_item_grades_distribution(item);\r\n                    },\r\n\r\n                    calculate_chart_item_grade_detail(item) {\r\n                        this.selected_item = item;\r\n                        let item_data = [{\r\n                            name: this.strings.grades_best_grade,\r\n                            y: Number(item.maxrating) || 0\r\n                        }, {\r\n                            name: this.strings.grades_average_grade,\r\n                            y: Number(item.average) || 0\r\n                        }, {\r\n                            name: this.strings.grades_worst_grade,\r\n                            y: Number(item.minrating) || 0\r\n                        }];\r\n                        this.grade_item_details_data = item_data;\r\n                    },\r\n\r\n                    calculate_chart_item_grades_distribution(item) {\r\n                        let greater = this.strings.grades_greater_than;\r\n                        let smaller = this.strings.grades_smaller_than;\r\n                        let categories = [\r\n                            `${greater} 90%`,\r\n                            `${greater} 80%`,\r\n                            `${greater} 70%`,\r\n                            `${greater} 60%`,\r\n                            `${greater} 50%`,\r\n                            `${smaller} 50%`\r\n                        ];\r\n                        let values = [0, 0, 0, 0, 0, 0];\r\n                        let users = [\r\n                            [],\r\n                            [],\r\n                            [],\r\n                            [],\r\n                            [],\r\n                            []\r\n                        ];\r\n                        if (item) {\r\n                            let weights = [0.9, 0.8, 0.7, 0.6, 0.5, 0];\r\n                            let ranges = [];\r\n                            let grademax = item.grademax;\r\n                            let limit = grademax;\r\n                            weights.forEach(weight => {\r\n                                let grade = grademax * weight;\r\n                                ranges.push({ max: limit, min: grade, count: 0 });\r\n                                limit = grade - 0.1;\r\n                            });\r\n\r\n                            item.grades.forEach(grade => {\r\n                                ranges.forEach((range, index) => {\r\n                                    if (grade.rawgrade >= range.min && grade.rawgrade <= range.max) {\r\n                                        range.count++;\r\n                                        users[index].push(grade.user);\r\n                                    }\r\n                                });\r\n                            });\r\n\r\n                            values = [];\r\n                            ranges.forEach((range, index) => {\r\n                                let max = this.isInt(range.max) ? range.max : range.max.toFixed(1);\r\n                                let min = this.isInt(range.min) ? range.min : range.min.toFixed(1);\r\n                                let label = `${max} - ${min}<br/>${categories[index]}`;\r\n                                categories[index] = label;\r\n                                values.push(range.count);\r\n                            });\r\n                        }\r\n                        this.grade_item_users = users;\r\n                        this.grade_item_distribution_categories = categories,\r\n                            this.grade_item_distribution_data = values;\r\n                    },\r\n\r\n                    find_first_grade_item(items) {\r\n                        let item;\r\n                        if (items.length) {\r\n                            let count = items.length;\r\n                            for (let i = 0; i < count; i++) {\r\n                                if (items[i].maxrating > 0) {\r\n                                    item = items[i];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!item) {\r\n                                item = items[0];\r\n                            }\r\n                        }\r\n                        return item;\r\n                    },\r\n\r\n                    isInt(n) {\r\n                        return n % 1 === 0;\r\n                    },\r\n\r\n                    capitalizeFirstLetter(string) {\r\n                        return string.charAt(0).toUpperCase() + string.slice(1);\r\n                    },\r\n\r\n                    update_dialog(value) {\r\n                        this.dialog = value;\r\n                    },\r\n\r\n                    open_chart_help(chart) {\r\n                        let contents = [];\r\n                        if (chart == \"grade_items_average\") {\r\n                            contents.push({\r\n                                title: this.strings.grade_items_average_help_title,\r\n                                description: this.strings.grade_items_average_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.grade_items_average_help_description_p2,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.grade_items_average_help_description_p3,\r\n                            });\r\n                        } else if (chart == \"item_grades_details\") {\r\n                            contents.push({\r\n                                title: this.strings.item_grades_details_help_title,\r\n                                description: this.strings.item_grades_details_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.item_grades_details_help_description_p2,\r\n                            });\r\n                        } else if (chart == \"item_grades_distribution\") {\r\n                            contents.push({\r\n                                title: this.strings.item_grades_distribution_help_title,\r\n                                description: this.strings.item_grades_distribution_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.item_grades_distribution_help_description_p2,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.item_grades_distribution_help_description_p3,\r\n                            });\r\n                        }\r\n                        this.help_contents = contents;\r\n                        if (this.help_contents.length) {\r\n                            this.help_dialog = true;\r\n                        }\r\n                    },\r\n\r\n                    update_help_dialog(value) {\r\n                        this.help_dialog = value;\r\n                    },\r\n\r\n                    get_timezone() {\r\n                        let information = `${this.strings.change_timezone} ${this.timezone}`\r\n                        return information;\r\n                    },\r\n                }\r\n            })\r\n        }\r\n\r\n        return {\r\n            init: init\r\n        };\r\n    });"],"file":"grades.min.js"}