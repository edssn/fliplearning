{"version":3,"sources":["../src/grades.js"],"names":["define","Vue","Vuetify","Axios","Moment","Pagination","Chart","Pageheader","init","content","console","log","use","component","vue","delimiters","el","vuetify","data","strings","groups","userid","courseid","timezone","render_has","profile_render","loading","errors","pages","grades","default_category","average_categories","average_data","selected_items","item_details","grade_item_title","grade_item_details_categories","grade_item_details_data","grade_item_distribution_categories","grade_item_distribution_data","selected_item","selected_users","beforeMount","categories","length","calculate_chart_items_average","items","item","find_first_grade_item","update_detail_charts","mounted","document","querySelector","style","display","computed","methods","get_help_content","changeCategory","build_chart_items_average","chart","type","backgroundColor","title","text","grades_chart_title","xAxis","legend","enabled","plotOptions","series","cursor","point","events","click","position","x","tooltip","formatter","name","average","toFixed","grademax","count","gradecount","grades_tooltip_average","grades_tooltip_grade","grades_tooltip_students","student_count","yAxis","allowDecimals","labels","format","grades_yaxis_title","credits","lang","noData","no_data","build_chart_item_grade_detail","subtitle","grades_details_subtitle","category","itemname","maxgrade","grade","maxrating","minrating","isInt","build_chart_item_grades_distribution","grades_distribution_subtitle","grades_distribution_yaxis_title","prefix","grades_distribution_tooltip_prefix","suffix","grades_distribution_tooltip_suffix","value","y","stacking","borderWidth","pointPadding","groupPadding","marker","lineWidth","values","forEach","push","average_percentage","calculate_chart_item_grade_detail","calculate_chart_item_grades_distribution","item_data","greater","grades_greater_than","smaller","grades_smaller_than","users","ranges","limit","weight","max","min","range","index","rawgrade","user","label","n","i"],"mappings":"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","sourcesContent":["define([\"local_fliplearning/vue\",\r\n        \"local_fliplearning/vuetify\",\r\n        \"local_fliplearning/axios\",\r\n        \"local_fliplearning/moment\",\r\n        \"local_fliplearning/pagination\",\r\n        \"local_fliplearning/chartcomponent\",\r\n        \"local_fliplearning/pageheader\",\r\n    ],\r\n    function(Vue, Vuetify, Axios, Moment, Pagination, Chart, Pageheader) {\r\n        \"use strict\";\r\n\r\n        function init(content) {\r\n            console.log(content);\r\n            Vue.use(Vuetify)\r\n            Vue.component('pagination', Pagination);\r\n            Vue.component('chart', Chart);\r\n            Vue.component('pageheader', Pageheader);\r\n            let vue = new Vue({\r\n                delimiters: [\"[[\", \"]]\"],\r\n                el: \"#grades\",\r\n                vuetify: new Vuetify(),\r\n                data() {\r\n                    return {\r\n                        strings : content.strings,\r\n                        groups : content.groups,\r\n                        userid : content.userid,\r\n                        courseid : content.courseid,\r\n                        timezone : content.timezone,\r\n                        render_has : content.profile_render,\r\n                        loading : false,\r\n                        errors : [],\r\n                        pages : content.pages,\r\n\r\n                        grades: content.grades,\r\n                        default_category: null,\r\n                        average_categories: [],\r\n                        average_data: [],\r\n                        selected_items: [],\r\n                        item_details: [],\r\n\r\n                        grade_item_title: \"\",\r\n                        grade_item_details_categories: [],\r\n                        grade_item_details_data: [],\r\n\r\n                        grade_item_distribution_categories: [],\r\n                        grade_item_distribution_data: [],\r\n\r\n                        selected_item: null,\r\n                        selected_users: null,\r\n                    }\r\n                },\r\n                beforeMount(){\r\n                    if (this.grades.categories.length) {\r\n                        this.default_category = this.grades.categories[0];\r\n                        this.calculate_chart_items_average(this.default_category.items);\r\n                        let item = this.find_first_grade_item(this.default_category.items);\r\n                        this.update_detail_charts(item);\r\n                        // this.calculate_chart_item_grade_detail(item);\r\n                        // this.calculate_chart_item_grades_distribution(item);\r\n                    };\r\n                },\r\n                mounted(){\r\n                    document.querySelector(\"#sessions-loader\").style.display = \"none\";\r\n                    document.querySelector(\"#grades\").style.display = \"block\";\r\n                },\r\n                computed :{\r\n\r\n                },\r\n                methods : {\r\n                    get_help_content(){\r\n                        let helpcontents = `Texto de Ayuda`;\r\n                        return helpcontents;\r\n                    },\r\n\r\n                    changeCategory(items) {\r\n                        this.calculate_chart_items_average(items);\r\n                        let item = this.find_first_grade_item(items);\r\n                        this.update_detail_charts(item);\r\n                        // this.calculate_chart_item_grade_detail(item);\r\n                        // this.calculate_chart_item_grades_distribution(item);\r\n                    },\r\n\r\n                    build_chart_items_average() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'column',\r\n                            backgroundColor: '#FAFAFA',\r\n                        };\r\n                        chart.title = {\r\n                            text: this.strings.grades_chart_title\r\n                        };\r\n                        chart.xAxis = {\r\n                            categories: this.average_categories\r\n                        };\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.plotOptions = {\r\n                            series: {\r\n                                cursor: 'pointer',\r\n                                point: {\r\n                                    events: {\r\n                                        click: function () {\r\n                                            let position = this.x;\r\n                                            let item = vue.selected_items[position];\r\n                                            vue.update_detail_charts(item);\r\n                                            // vue.calculate_chart_item_grade_detail(item);\r\n                                            // vue.calculate_chart_item_grades_distribution(item);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.tooltip = {\r\n                            formatter: function() {\r\n                                let position = this.point.x;\r\n                                let item = vue.selected_items[position];\r\n                                let name = this.x;\r\n                                let average = Number(item.average).toFixed(2);\r\n                                let grademax = item.grademax;\r\n                                let count = item.gradecount;\r\n                                let text = '<b>' + name + '<b> <br/>' +\r\n                                    vue.strings.grades_tooltip_average + ': ' + average + '<br/>' +\r\n                                    vue.strings.grades_tooltip_grade + ': ' + grademax + '<br/>' +\r\n                                    count + ' ' + vue.strings.grades_tooltip_students + ' ' +\r\n                                    vue.grades.student_count\r\n                                    + '<br/>';\r\n                                return text;\r\n                            }\r\n                        };\r\n                        chart.yAxis = [{\r\n                            allowDecimals: false,\r\n                            labels: {\r\n                                format: '{value} %',\r\n                            },\r\n                            title: {\r\n                                text: this.strings.grades_yaxis_title,\r\n                            }\r\n                        }];\r\n                        chart.series = [{\r\n                            data: this.average_data,\r\n                        }];\r\n                        chart.credits = {\r\n                            enabled: false\r\n                        };\r\n                        chart.lang = {\r\n                            noData: this.strings.no_data,\r\n                        };\r\n                        return chart;\r\n                    },\r\n\r\n                    build_chart_item_grade_detail() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'bar',\r\n                            backgroundColor: '#FAFAFA',\r\n                        };\r\n                        chart.title = {\r\n                            text: this.grade_item_title,\r\n                        };\r\n                        chart.subtitle = {\r\n                            text: this.strings.grades_details_subtitle,\r\n                        };\r\n                        chart.xAxis = {\r\n                            categories: this.strings.grade_item_details_categories,\r\n                        };\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.tooltip = {\r\n                            formatter: function() {\r\n                                let category = this.x;\r\n                                let name = vue.selected_item.itemname;\r\n                                let maxgrade = vue.selected_item.grademax;\r\n                                let grade = 0;\r\n                                if (this.point.x == 0) {\r\n                                    grade = vue.selected_item.maxrating;\r\n                                } else if (this.point.x == 1) {\r\n                                    grade = vue.selected_item.average;\r\n                                } else {\r\n                                    grade = vue.selected_item.minrating;\r\n                                }\r\n                                console.log({grade, type: typeof grade});\r\n                                grade = Number(grade);\r\n                                grade = vue.isInt(grade) ? grade : grade.toFixed(2);\r\n\r\n                                let text = '<b>' + name + '<b> <br/>' +\r\n                                    category + ': ' + grade + '/' + maxgrade + '<br/>';\r\n                                return text;\r\n                            }\r\n                        };\r\n                        chart.yAxis = [{\r\n                            title: {\r\n                                enabled: false,\r\n                            }\r\n                        }];\r\n                        chart.series = [{\r\n                            data: this.grade_item_details_data,\r\n                        }];\r\n                        chart.credits = {\r\n                            enabled: false\r\n                        };\r\n                        chart.lang = {\r\n                            noData: this.strings.no_data,\r\n                        };\r\n                        return chart;\r\n                    },\r\n\r\n                    build_chart_item_grades_distribution() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            backgroundColor: '#FAFAFA',\r\n                        };\r\n                        chart.title = {\r\n                            text: this.grade_item_title,\r\n                        };\r\n                        chart.subtitle = {\r\n                            text: this.strings.grades_distribution_subtitle,\r\n                        };\r\n                        chart.xAxis = {\r\n                            categories: this.grade_item_distribution_categories\r\n                        };\r\n                        chart.yAxis = [{\r\n                            title: {\r\n                                text: this.strings.grades_distribution_yaxis_title,\r\n                            }\r\n                        }];\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.tooltip = {\r\n                            formatter: function() {\r\n                                let prefix = vue.strings.grades_distribution_tooltip_prefix;\r\n                                let suffix = vue.strings.grades_distribution_tooltip_suffix;\r\n                                let name = this.x;\r\n                                let value = this.y;\r\n                                let text = '<b>' + prefix + '</b> '+ name + ' <br/>'\r\n                                    + value + ' ' + suffix;\r\n                                return text;\r\n                            }\r\n                        };\r\n                        chart.plotOptions = {\r\n                            series: {\r\n                                stacking: 'normal',\r\n                                borderWidth: 1,\r\n                                pointPadding: 0,\r\n                                groupPadding: 0,\r\n                                point: {\r\n                                    events: {\r\n                                        click: function () {\r\n                                            let position = this.x;\r\n                                            console.log(vue.selected_users[position]);\r\n                                            console.log(vue.selected_users);\r\n                                            console.log(this);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.series = [{\r\n                            type: 'column',\r\n                            name: 'Jane',\r\n                            data: this.grade_item_distribution_data\r\n                        }, {\r\n                            type: 'spline',\r\n                            name: 'Average',\r\n                            data: this.grade_item_distribution_data,\r\n                            marker: {\r\n                                lineWidth: 1,\r\n                            }\r\n                        }];\r\n                        chart.credits = {\r\n                            enabled: false\r\n                        };\r\n                        chart.lang = {\r\n                            noData: this.strings.no_data,\r\n                        };\r\n                        return chart;\r\n                    },\r\n\r\n                    calculate_chart_items_average(items) {\r\n                        let values = [];\r\n                        let categories = [];\r\n                        items.forEach(item => {\r\n                            values.push(item.average_percentage);\r\n                            categories.push(item.itemname);\r\n                        });\r\n                        this.average_categories = categories;\r\n                        this.average_data = values;\r\n                        this.selected_items = items;\r\n                    },\r\n\r\n                    update_detail_charts (item) {\r\n                        this.grade_item_title = item.itemname;\r\n                        this.calculate_chart_item_grade_detail(item);\r\n                        this.calculate_chart_item_grades_distribution(item);\r\n                    },\r\n\r\n                    calculate_chart_item_grade_detail(item) {\r\n                        this.selected_item = item;\r\n                        let item_data = [0, 0, 0];\r\n                        if (item) {\r\n                            item_data = [\r\n                                Number(item.maxrating),\r\n                                Number(item.average),\r\n                                Number(item.minrating),\r\n                            ];\r\n                        }\r\n                        this.grade_item_details_data = item_data;\r\n                    },\r\n\r\n                    calculate_chart_item_grades_distribution(item) {\r\n                        let greater = this.strings.grades_greater_than;\r\n                        let smaller = this.strings.grades_smaller_than;\r\n                        let categories = [\r\n                            `${greater} 90%`,\r\n                            `${greater} 80%`,\r\n                            `${greater} 70%`,\r\n                            `${greater} 60%`,\r\n                            `${greater} 50%`,\r\n                            `${smaller} 50%`];\r\n                        let values = [0, 0, 0, 0, 0, 0];\r\n                        let users = [[], [], [], [], [], []];\r\n                        if (item) {\r\n                            let weights = [0.9, 0.8, 0.7, 0.6, 0.5, 0];\r\n                            let ranges = [];\r\n                            let grademax = item.grademax;\r\n                            let limit = grademax;\r\n                            weights.forEach(weight => {\r\n                                let grade = grademax * weight;\r\n                                ranges.push({ max: limit, min: grade, count: 0});\r\n                                limit = grade - 0.1;\r\n                            });\r\n\r\n                            item.grades.forEach(grade => {\r\n                                ranges.forEach((range, index) => {\r\n                                    if (grade.rawgrade >= range.min && grade.rawgrade <= range.max) {\r\n                                        range.count++;\r\n                                        users[index].push(grade.user);\r\n                                    }\r\n                                });\r\n                            });\r\n\r\n                            values = [];\r\n                            ranges.forEach((range, index) => {\r\n                                let max = this.isInt(range.max) ? range.max : range.max.toFixed(1);\r\n                                let min = this.isInt(range.min) ? range.min : range.min.toFixed(1);\r\n                                let label = `${max} - ${min}<br/>${categories[index]}`;\r\n                                categories[index] = label;\r\n                                values.push(range.count);\r\n                            });\r\n                        }\r\n                        this.selected_users = users;\r\n                        this.grade_item_distribution_categories = categories,\r\n                        this.grade_item_distribution_data = values;\r\n                    },\r\n\r\n                    isInt(n) {\r\n                        return n % 1 === 0;\r\n                    },\r\n\r\n\r\n                    find_first_grade_item(items) {\r\n                        let item;\r\n                        if (items.length) {\r\n                            let count = items.length;\r\n                            for (let i = 0; i < count; i++) {\r\n                                if (items[i].maxrating > 0) {\r\n                                    item = items[i];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!item) {\r\n                                item = items[0];\r\n                            }\r\n                        }\r\n                        return item;\r\n                    },\r\n\r\n                }\r\n            })\r\n        }\r\n\r\n        return {\r\n            init : init\r\n        };\r\n    });"],"file":"grades.min.js"}